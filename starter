{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bbaacd67",
   "metadata": {
    "_cell_guid": "4f15d919-7652-403c-a073-f39f73457432",
    "_uuid": "7706bf7e-ab7a-4ce7-b326-f816fa04bf03",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:42.920766Z",
     "iopub.status.busy": "2025-02-12T16:35:42.920357Z",
     "iopub.status.idle": "2025-02-12T16:35:43.973581Z",
     "shell.execute_reply": "2025-02-12T16:35:43.971914Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.065221,
     "end_time": "2025-02-12T16:35:43.976480",
     "exception": false,
     "start_time": "2025-02-12T16:35:42.911259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4209d905",
   "metadata": {
    "_cell_guid": "9dbb0081-4679-459b-af26-591a4abd531d",
    "_uuid": "206a70f6-3b57-4331-af9b-9febc8c14548",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:43.992917Z",
     "iopub.status.busy": "2025-02-12T16:35:43.992388Z",
     "iopub.status.idle": "2025-02-12T16:35:46.729595Z",
     "shell.execute_reply": "2025-02-12T16:35:46.728655Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.748428,
     "end_time": "2025-02-12T16:35:46.732101",
     "exception": false,
     "start_time": "2025-02-12T16:35:43.983673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from sklearn.metrics import mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a9e7598a",
   "metadata": {
    "_cell_guid": "3cd66a87-4217-4bdf-b3b2-ce685b4e80aa",
    "_uuid": "8efd9541-9034-4dda-8ed4-2d82ac392ad5",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:46.748483Z",
     "iopub.status.busy": "2025-02-12T16:35:46.747776Z",
     "iopub.status.idle": "2025-02-12T16:35:55.695728Z",
     "shell.execute_reply": "2025-02-12T16:35:55.694407Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 8.958778,
     "end_time": "2025-02-12T16:35:55.698613",
     "exception": false,
     "start_time": "2025-02-12T16:35:46.739835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Adjust file paths as necessary\n",
    "train = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\n",
    "test = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\n",
    "inventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\n",
    "calendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\n",
    "weights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8294e141",
   "metadata": {
    "_cell_guid": "9fe9df98-3215-4daf-8713-7c9b5cde2af4",
    "_uuid": "c03ce7fa-955b-47a3-adbe-917bfd435201",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:55.713892Z",
     "iopub.status.busy": "2025-02-12T16:35:55.713486Z",
     "iopub.status.idle": "2025-02-12T16:35:59.210209Z",
     "shell.execute_reply": "2025-02-12T16:35:59.209075Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.507281,
     "end_time": "2025-02-12T16:35:59.212850",
     "exception": false,
     "start_time": "2025-02-12T16:35:55.705569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = train.merge(calendar, on=['warehouse', 'date'], how='left')\n",
    "train = train.merge(weights, on='unique_id', how='left')\n",
    "train = train.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "803ca63c",
   "metadata": {
    "_cell_guid": "27f4d8cd-e1fd-482b-b41f-54b0390a910d",
    "_uuid": "3a9818a8-052b-4686-b1d4-25ae4c2aee12",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:59.227357Z",
     "iopub.status.busy": "2025-02-12T16:35:59.226918Z",
     "iopub.status.idle": "2025-02-12T16:35:59.241188Z",
     "shell.execute_reply": "2025-02-12T16:35:59.240208Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.024223,
     "end_time": "2025-02-12T16:35:59.243564",
     "exception": false,
     "start_time": "2025-02-12T16:35:59.219341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test = test.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "052a9775",
   "metadata": {
    "_cell_guid": "95d970c2-816d-4f76-bd29-5b4f6527a087",
    "_uuid": "78a91a32-cb22-4248-8ba8-a302107f7353",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:35:59.258325Z",
     "iopub.status.busy": "2025-02-12T16:35:59.257407Z",
     "iopub.status.idle": "2025-02-12T16:36:00.005218Z",
     "shell.execute_reply": "2025-02-12T16:36:00.004096Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.757731,
     "end_time": "2025-02-12T16:36:00.007685",
     "exception": false,
     "start_time": "2025-02-12T16:35:59.249954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['date'] = pd.to_datetime(train['date'])\n",
    "test['date'] = pd.to_datetime(test['date'])\n",
    "calendar['date'] = pd.to_datetime(calendar['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b06f729",
   "metadata": {
    "_cell_guid": "deb975bc-eae1-41df-94fc-7d1719f2e081",
    "_uuid": "518f5130-8872-49ea-85e5-ff6cf755d667",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.022353Z",
     "iopub.status.busy": "2025-02-12T16:36:00.021923Z",
     "iopub.status.idle": "2025-02-12T16:36:00.028563Z",
     "shell.execute_reply": "2025-02-12T16:36:00.027182Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.016708,
     "end_time": "2025-02-12T16:36:00.030944",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.014236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def date_features(df):\n",
    "    df[\"day_of_week\"] = df[\"date\"].dt.dayofweek\n",
    "    df[\"month\"] = df[\"date\"].dt.month\n",
    "    df[\"Day_of_Month\"] = df[\"date\"].dt.day\n",
    "    df[\"Week_of_Year\"] = df[\"date\"].dt.isocalendar().week\n",
    "    df[\"Date_Weekday\"] = df[\"date\"].dt.weekday\n",
    "    df[\"Date_Dayofyear\"] = df[\"date\"].dt.dayofyear\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "addaa975",
   "metadata": {
    "_cell_guid": "f971aaf9-24ae-41d0-8a7a-feaef08cf757",
    "_uuid": "945e7b90-c421-4dc7-a779-14e7448dd8dd",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.045791Z",
     "iopub.status.busy": "2025-02-12T16:36:00.045412Z",
     "iopub.status.idle": "2025-02-12T16:36:00.051167Z",
     "shell.execute_reply": "2025-02-12T16:36:00.049918Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.015985,
     "end_time": "2025-02-12T16:36:00.053475",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.037490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def category(df):\n",
    "    df['category'] = df['name'].str.split('_',expand=True)[0]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ce9ac836",
   "metadata": {
    "_cell_guid": "ad13b37b-bf95-4629-a966-8f8c073a9d82",
    "_uuid": "10f9d5d2-883a-4a61-b9d0-e8dfef9ccf4a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.068997Z",
     "iopub.status.busy": "2025-02-12T16:36:00.067884Z",
     "iopub.status.idle": "2025-02-12T16:36:00.093420Z",
     "shell.execute_reply": "2025-02-12T16:36:00.092113Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.036123,
     "end_time": "2025-02-12T16:36:00.096058",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.059935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge weights into training data\n",
    "train['weight'] = train['weight'].fillna(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "875a39be",
   "metadata": {
    "_cell_guid": "2412718a-5c01-4758-b9a4-bdbc65b7462d",
    "_uuid": "9558b350-f4c1-4366-ad94-bc0b2c1ace1f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.111439Z",
     "iopub.status.busy": "2025-02-12T16:36:00.110968Z",
     "iopub.status.idle": "2025-02-12T16:36:00.118282Z",
     "shell.execute_reply": "2025-02-12T16:36:00.117078Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.017665,
     "end_time": "2025-02-12T16:36:00.120842",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.103177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "PERIODS = [7, 14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]\n",
    "\n",
    "def lagged_product_sales(df):\n",
    "    if 'sales' in df.columns:  # Check if 'sales' column exists\n",
    "        for shift in PERIODS:\n",
    "            df[f'product_sales_{shift}'] = df.groupby(['warehouse', 'name'])['sales'].shift(periods=shift)\n",
    "    else:\n",
    "        # If 'sales' column is missing, fill lagged features with NaN or 0\n",
    "        for shift in PERIODS:\n",
    "            df[f'product_sales_{shift}'] = np.nan  # or 0\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee489565",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.136534Z",
     "iopub.status.busy": "2025-02-12T16:36:00.136132Z",
     "iopub.status.idle": "2025-02-12T16:36:00.486642Z",
     "shell.execute_reply": "2025-02-12T16:36:00.485525Z"
    },
    "papermill": {
     "duration": 0.362289,
     "end_time": "2025-02-12T16:36:00.490297",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.128008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['price_discount_interaction'] = train['sell_price_main'] * train['type_0_discount']\n",
    "test['price_discount_interaction'] = test['sell_price_main'] * test['type_0_discount']\n",
    "\n",
    "# Add a small constant to avoid log(0)\n",
    "train['log_total_orders'] = np.log1p(train['total_orders'])\n",
    "test['log_total_orders'] = np.log1p(test['total_orders'])\n",
    "\n",
    "# Create polynomial features\n",
    "train['log_total_orders_sq'] = train['log_total_orders'] ** 2\n",
    "train['log_total_orders_cube'] = train['log_total_orders'] ** 3\n",
    "train['log_total_orders_fourth'] = train['log_total_orders'] ** 4\n",
    "\n",
    "test['log_total_orders_sq'] = test['log_total_orders'] ** 2\n",
    "test['log_total_orders_cube'] = test['log_total_orders'] ** 3\n",
    "test['log_total_orders_fourth'] = test['log_total_orders'] ** 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "49ce16d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.505431Z",
     "iopub.status.busy": "2025-02-12T16:36:00.504673Z",
     "iopub.status.idle": "2025-02-12T16:36:00.535438Z",
     "shell.execute_reply": "2025-02-12T16:36:00.534375Z"
    },
    "papermill": {
     "duration": 0.041095,
     "end_time": "2025-02-12T16:36:00.537873",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.496778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['log_total_orders_discount'] = train['log_total_orders'] * train['type_0_discount']\n",
    "test['log_total_orders_discount'] = test['log_total_orders'] * test['type_0_discount']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "370d29d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.552683Z",
     "iopub.status.busy": "2025-02-12T16:36:00.552268Z",
     "iopub.status.idle": "2025-02-12T16:36:00.771905Z",
     "shell.execute_reply": "2025-02-12T16:36:00.770752Z"
    },
    "papermill": {
     "duration": 0.23018,
     "end_time": "2025-02-12T16:36:00.774638",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.544458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add a small constant to avoid log(0)\n",
    "train['log_sell_price_main'] = np.log1p(train['sell_price_main'])\n",
    "test['log_sell_price_main'] = np.log1p(test['sell_price_main'])\n",
    "\n",
    "# Create polynomial features\n",
    "train['log_sell_price_sq'] = train['sell_price_main'] ** 2\n",
    "train['log_sell_price_cube'] = train['sell_price_main'] ** 3\n",
    "\n",
    "test['log_sell_price_sq'] = test['sell_price_main'] ** 2\n",
    "test['log_sell_price_cube'] = test['sell_price_main'] ** 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ee78f129",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.790906Z",
     "iopub.status.busy": "2025-02-12T16:36:00.790534Z",
     "iopub.status.idle": "2025-02-12T16:36:00.939654Z",
     "shell.execute_reply": "2025-02-12T16:36:00.938352Z"
    },
    "papermill": {
     "duration": 0.160348,
     "end_time": "2025-02-12T16:36:00.942602",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.782254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['type_0_sq'] = train['type_0_discount'] ** 2 \n",
    "train['type_0_cube'] = train['type_0_discount'] ** 3\n",
    "train['type_0_fourth'] = train['type_0_discount'] ** 4\n",
    "\n",
    "test['type_0_sq'] = test['type_0_discount'] ** 2 \n",
    "test['type_0_cube'] = test['type_0_discount'] ** 3\n",
    "test['type_0_fourth'] = test['type_0_discount'] ** 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "94a094fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:00.958500Z",
     "iopub.status.busy": "2025-02-12T16:36:00.958110Z",
     "iopub.status.idle": "2025-02-12T16:36:00.991190Z",
     "shell.execute_reply": "2025-02-12T16:36:00.989830Z"
    },
    "papermill": {
     "duration": 0.044002,
     "end_time": "2025-02-12T16:36:00.993518",
     "exception": false,
     "start_time": "2025-02-12T16:36:00.949516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['discount_interaction'] = train['type_0_discount'] * train['type_2_discount']\n",
    "test['discount_interaction'] = test['type_0_discount'] * test['type_2_discount']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2587c699",
   "metadata": {
    "_cell_guid": "de6bac99-f42a-45d9-9797-aa85be28cf09",
    "_uuid": "1e361342-8082-4dd7-874d-0646154cddcb",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:01.008288Z",
     "iopub.status.busy": "2025-02-12T16:36:01.007860Z",
     "iopub.status.idle": "2025-02-12T16:36:20.937766Z",
     "shell.execute_reply": "2025-02-12T16:36:20.936256Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 19.940386,
     "end_time": "2025-02-12T16:36:20.940440",
     "exception": false,
     "start_time": "2025-02-12T16:36:01.000054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = date_features(train)\n",
    "train = category(train)\n",
    "train = lagged_product_sales(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "51e00acb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:20.955418Z",
     "iopub.status.busy": "2025-02-12T16:36:20.954969Z",
     "iopub.status.idle": "2025-02-12T16:36:23.397540Z",
     "shell.execute_reply": "2025-02-12T16:36:23.396258Z"
    },
    "papermill": {
     "duration": 2.453504,
     "end_time": "2025-02-12T16:36:23.400558",
     "exception": false,
     "start_time": "2025-02-12T16:36:20.947054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2070509932.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  train.fillna(method='bfill', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Fill missing values in train\n",
    "train.fillna(method='bfill', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "69791196",
   "metadata": {
    "_cell_guid": "53c1eea1-adf4-4f8c-9712-d3b474645e35",
    "_uuid": "fcba84ec-b048-4257-8b98-3441d22ebb2c",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:23.416041Z",
     "iopub.status.busy": "2025-02-12T16:36:23.415579Z",
     "iopub.status.idle": "2025-02-12T16:36:26.471573Z",
     "shell.execute_reply": "2025-02-12T16:36:26.469873Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.066826,
     "end_time": "2025-02-12T16:36:26.474318",
     "exception": false,
     "start_time": "2025-02-12T16:36:23.407492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function to reduce memory usage\n",
    "def reduce_memory_usage(df):\n",
    "    for col in df.columns:\n",
    "        col_type = df[col].dtype\n",
    "        \n",
    "        # Skip datetime columns\n",
    "        if col_type == 'datetime64[ns]':\n",
    "            continue\n",
    "        \n",
    "        # Process numeric columns\n",
    "        if col_type != 'object':\n",
    "            c_min = df[col].min()\n",
    "            c_max = df[col].max()\n",
    "            \n",
    "            if str(col_type)[:3] == 'int':\n",
    "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                    df[col] = df[col].astype(np.int8)\n",
    "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                    df[col] = df[col].astype(np.int16)\n",
    "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                    df[col] = df[col].astype(np.int32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.int64)\n",
    "            else:\n",
    "                # Handle float columns\n",
    "                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                    df[col] = df[col].astype(np.float32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.float64)\n",
    "        else:\n",
    "            # For object columns, consider categorical encoding\n",
    "            df[col] = df[col].astype('category')\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Apply memory reduction to train and test\n",
    "train = reduce_memory_usage(train)\n",
    "test = reduce_memory_usage(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "40893dc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:26.491125Z",
     "iopub.status.busy": "2025-02-12T16:36:26.490050Z",
     "iopub.status.idle": "2025-02-12T16:36:26.499432Z",
     "shell.execute_reply": "2025-02-12T16:36:26.497948Z"
    },
    "papermill": {
     "duration": 0.021173,
     "end_time": "2025-02-12T16:36:26.502837",
     "exception": false,
     "start_time": "2025-02-12T16:36:26.481664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['unique_id', 'date', 'warehouse', 'total_orders', 'sales',\n",
       "       'sell_price_main', 'availability', 'type_0_discount', 'type_1_discount',\n",
       "       'type_2_discount', 'type_3_discount', 'type_4_discount',\n",
       "       'type_5_discount', 'type_6_discount', 'holiday_name', 'holiday',\n",
       "       'shops_closed', 'winter_school_holidays', 'school_holidays', 'weight',\n",
       "       'product_unique_id', 'name', 'price_discount_interaction',\n",
       "       'log_total_orders', 'log_total_orders_sq', 'log_total_orders_cube',\n",
       "       'log_total_orders_fourth', 'log_total_orders_discount',\n",
       "       'log_sell_price_main', 'log_sell_price_sq', 'log_sell_price_cube',\n",
       "       'type_0_sq', 'type_0_cube', 'type_0_fourth', 'discount_interaction',\n",
       "       'day_of_week', 'month', 'Day_of_Month', 'Week_of_Year', 'Date_Weekday',\n",
       "       'Date_Dayofyear', 'category', 'product_sales_7', 'product_sales_14',\n",
       "       'product_sales_16', 'product_sales_18', 'product_sales_21',\n",
       "       'product_sales_30', 'product_sales_60', 'product_sales_90',\n",
       "       'product_sales_120', 'product_sales_180', 'product_sales_270',\n",
       "       'product_sales_350', 'product_sales_600', 'product_sales_1000'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fea7f0db",
   "metadata": {
    "_cell_guid": "5c1a1e4b-b37a-4ccf-beac-f2003e7cd874",
    "_uuid": "71351c00-8faa-421c-ba90-f2ffa28e73f8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:26.518790Z",
     "iopub.status.busy": "2025-02-12T16:36:26.518396Z",
     "iopub.status.idle": "2025-02-12T16:36:26.954536Z",
     "shell.execute_reply": "2025-02-12T16:36:26.953262Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.44735,
     "end_time": "2025-02-12T16:36:26.957160",
     "exception": false,
     "start_time": "2025-02-12T16:36:26.509810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prepare data for LightGBM\n",
    "features = ['warehouse', 'total_orders',\n",
    "       'sell_price_main','type_0_discount',\n",
    "       'type_2_discount', 'name', 'price_discount_interaction',\n",
    "       'log_total_orders', 'log_total_orders_sq', 'log_total_orders_cube',\n",
    "       'log_total_orders_fourth', 'log_total_orders_discount',\n",
    "       'log_sell_price_main', 'log_sell_price_sq', 'log_sell_price_cube',\n",
    "       'type_0_sq', 'type_0_cube', 'type_0_fourth', 'discount_interaction',\n",
    "       'day_of_week', 'month', 'Day_of_Month', 'Week_of_Year', 'Date_Weekday',\n",
    "       'Date_Dayofyear', 'category', 'product_sales_7', 'product_sales_14',\n",
    "       'product_sales_16', 'product_sales_18', 'product_sales_21',\n",
    "       'product_sales_30', 'product_sales_60', 'product_sales_90',\n",
    "       'product_sales_120', 'product_sales_180', 'product_sales_270',\n",
    "       'product_sales_350', 'product_sales_600', 'product_sales_1000']\n",
    "X = train[features]\n",
    "y = train['sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8164098c",
   "metadata": {
    "_cell_guid": "b4071951-c44a-4aea-ab14-a5921442c8fa",
    "_uuid": "b557ee69-cc99-48cb-bed9-dfe9a9236ad8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:26.972701Z",
     "iopub.status.busy": "2025-02-12T16:36:26.971814Z",
     "iopub.status.idle": "2025-02-12T16:36:29.260843Z",
     "shell.execute_reply": "2025-02-12T16:36:29.259789Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.29982,
     "end_time": "2025-02-12T16:36:29.263671",
     "exception": false,
     "start_time": "2025-02-12T16:36:26.963851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the number of splits for TimeSeriesSplit\n",
    "tscv = TimeSeriesSplit(n_splits=3)\n",
    "\n",
    "# Initialize lists to store results\n",
    "wmae_scores = []\n",
    "\n",
    "# Perform time series cross-validation\n",
    "for train_index, val_index in tscv.split(X):\n",
    "    X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n",
    "    y_train, y_val = y.iloc[train_index], y.iloc[val_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aa800cb1",
   "metadata": {
    "_cell_guid": "3d4b1d44-dac1-4da7-91c7-e16823d18069",
    "_uuid": "0990842f-6819-4241-8518-c8c30c4311f4",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:36:29.279247Z",
     "iopub.status.busy": "2025-02-12T16:36:29.278783Z",
     "iopub.status.idle": "2025-02-12T16:54:15.390761Z",
     "shell.execute_reply": "2025-02-12T16:54:15.389571Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1066.13,
     "end_time": "2025-02-12T16:54:15.400689",
     "exception": false,
     "start_time": "2025-02-12T16:36:29.270689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `num_boost_round` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] num_iterations is set=4900, num_boost_round=4900 will be ignored. Current value: num_iterations=4900\n",
      "[LightGBM] [Warning] Categorical features with more bins than the configured maximum bin number found.\n",
      "[LightGBM] [Warning] For categorical features, max_bin and max_bin_by_feature may be ignored with a large number of categories.\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.299957 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 9622\n",
      "[LightGBM] [Info] Number of data points in the train set: 3005565, number of used features: 40\n",
      "[LightGBM] [Info] Start training from score 112.953860\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor(colsample_bytree=0.8528497905459008,\n",
       "              learning_rate=0.021796506746095973, max_depth=10, metric=&#x27;mae&#x27;,\n",
       "              min_child_samples=25, num_boost_round=4900, num_leaves=80,\n",
       "              objective=&#x27;regression&#x27;, reg_alpha=0.01, reg_lambda=0.1,\n",
       "              subsample=0.7057135664023435)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor(colsample_bytree=0.8528497905459008,\n",
       "              learning_rate=0.021796506746095973, max_depth=10, metric=&#x27;mae&#x27;,\n",
       "              min_child_samples=25, num_boost_round=4900, num_leaves=80,\n",
       "              objective=&#x27;regression&#x27;, reg_alpha=0.01, reg_lambda=0.1,\n",
       "              subsample=0.7057135664023435)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LGBMRegressor(colsample_bytree=0.8528497905459008,\n",
       "              learning_rate=0.021796506746095973, max_depth=10, metric='mae',\n",
       "              min_child_samples=25, num_boost_round=4900, num_leaves=80,\n",
       "              objective='regression', reg_alpha=0.01, reg_lambda=0.1,\n",
       "              subsample=0.7057135664023435)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params={ \n",
    "    'learning_rate': 0.021796506746095975,\n",
    "    'num_leaves': 80,\n",
    "    'max_depth': 10,\n",
    "    'min_child_samples': 25,\n",
    "    'subsample': 0.7057135664023435,\n",
    "    'colsample_bytree': 0.8528497905459008,\n",
    "    'reg_alpha': 0.01,\n",
    "    'reg_lambda': 0.1,\n",
    "    'num_boost_round': 4900,\n",
    "    'objective': 'regression',\n",
    "    'metric': 'mae',\n",
    "    'boosting_type': 'gbdt',\n",
    "}\n",
    "\n",
    "# Train LightGBM model\n",
    "model = lgb.LGBMRegressor(**params)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9a1073a7",
   "metadata": {
    "_cell_guid": "6fc9b68e-cae2-4ee7-80c9-8ffa16c80ab7",
    "_uuid": "7b1858ca-daf7-46e7-90c7-e6b8aee67eca",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T16:54:15.417166Z",
     "iopub.status.busy": "2025-02-12T16:54:15.416704Z",
     "iopub.status.idle": "2025-02-12T19:03:24.308547Z",
     "shell.execute_reply": "2025-02-12T19:03:24.306728Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 7748.910012,
     "end_time": "2025-02-12T19:03:24.318035",
     "exception": false,
     "start_time": "2025-02-12T16:54:15.408023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training WMAE: 16.649698984213945\n",
      "Validation WMAE: 28.35595609829511\n"
     ]
    }
   ],
   "source": [
    "# Evaluate training error\n",
    "y_train_pred = model.predict(X_train)\n",
    "train_wmae = mean_absolute_error(y_train, y_train_pred, sample_weight=train.loc[X_train.index, 'weight'])\n",
    "print(f'Training WMAE: {train_wmae}')\n",
    "\n",
    "# Evaluate validation error\n",
    "y_val_pred = model.predict(X_val)\n",
    "val_wmae = mean_absolute_error(y_val, y_val_pred, sample_weight=train.loc[X_val.index, 'weight'])\n",
    "print(f'Validation WMAE: {val_wmae}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dc5b02c7",
   "metadata": {
    "_cell_guid": "86bbea9c-d45c-4ef4-a041-e6219bdfa098",
    "_uuid": "ad7dbe66-69b6-49da-a4ff-cd2fe6b58f1f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T19:03:24.337509Z",
     "iopub.status.busy": "2025-02-12T19:03:24.336854Z",
     "iopub.status.idle": "2025-02-12T19:03:24.390499Z",
     "shell.execute_reply": "2025-02-12T19:03:24.389267Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.066521,
     "end_time": "2025-02-12T19:03:24.393246",
     "exception": false,
     "start_time": "2025-02-12T19:03:24.326725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test = date_features(test)\n",
    "test = category(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "682ebf67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T19:03:24.409546Z",
     "iopub.status.busy": "2025-02-12T19:03:24.409164Z",
     "iopub.status.idle": "2025-02-12T19:03:26.286612Z",
     "shell.execute_reply": "2025-02-12T19:03:26.285573Z"
    },
    "papermill": {
     "duration": 1.88848,
     "end_time": "2025-02-12T19:03:26.289134",
     "exception": false,
     "start_time": "2025-02-12T19:03:24.400654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n"
     ]
    }
   ],
   "source": [
    "# Approximate lagged features for test using the last known values from train\n",
    "for shift in PERIODS:\n",
    "    last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
    "    last_lag_values.rename(columns={f'product_sales_{shift}': f'product_sales_{shift}'}, inplace=True)\n",
    "    test = test.merge(last_lag_values, on=['warehouse', 'name'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "476d81ce",
   "metadata": {
    "_cell_guid": "c8efc739-bc8c-430e-970f-e61bc8b931bf",
    "_uuid": "1194d812-9214-47f4-ab47-02a6f326350a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T19:03:26.306997Z",
     "iopub.status.busy": "2025-02-12T19:03:26.306596Z",
     "iopub.status.idle": "2025-02-12T19:03:26.331943Z",
     "shell.execute_reply": "2025-02-12T19:03:26.330668Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.037247,
     "end_time": "2025-02-12T19:03:26.334406",
     "exception": false,
     "start_time": "2025-02-12T19:03:26.297159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/783850029.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  test.fillna(method='bfill', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "test.fillna(method='bfill', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1096632a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-12T19:03:26.352724Z",
     "iopub.status.busy": "2025-02-12T19:03:26.352353Z",
     "iopub.status.idle": "2025-02-12T19:03:26.376300Z",
     "shell.execute_reply": "2025-02-12T19:03:26.375045Z"
    },
    "papermill": {
     "duration": 0.035887,
     "end_time": "2025-02-12T19:03:26.378763",
     "exception": false,
     "start_time": "2025-02-12T19:03:26.342876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Align categorical features between train and test\n",
    "categorical_features = ['warehouse', 'name', 'category']  # Add other categorical columns here\n",
    "\n",
    "for col in categorical_features:\n",
    "    # Get unique categories from the training set\n",
    "    train_categories = train[col].cat.categories\n",
    "    \n",
    "    # Reorder and align the test set's categories with the training set\n",
    "    test[col] = test[col].astype('category').cat.set_categories(train_categories)\n",
    "    \n",
    "    # Fill missing categories with \"Unknown\"\n",
    "    test[col] = test[col].cat.add_categories(['Unknown']).fillna('Unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2fef3f6d",
   "metadata": {
    "_cell_guid": "f8cd7ae4-b459-47bb-8429-74b7f77727a4",
    "_uuid": "1a27e5a1-4c11-4473-92db-ae329f4a2371",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T19:03:26.396361Z",
     "iopub.status.busy": "2025-02-12T19:03:26.395921Z",
     "iopub.status.idle": "2025-02-12T19:04:46.112811Z",
     "shell.execute_reply": "2025-02-12T19:04:46.111677Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 79.728745,
     "end_time": "2025-02-12T19:04:46.115571",
     "exception": false,
     "start_time": "2025-02-12T19:03:26.386826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Ensure the test set has the same columns as the training set\n",
    "X_test = test[features]\n",
    "\n",
    "# Predict on the test set\n",
    "test_predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0dbd351a",
   "metadata": {
    "_cell_guid": "00b8ab33-d2bc-46a3-ad24-1d60cf59d6c2",
    "_uuid": "496af11a-2df6-4c0b-b4ee-5732a9592901",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-12T19:04:46.133507Z",
     "iopub.status.busy": "2025-02-12T19:04:46.133122Z",
     "iopub.status.idle": "2025-02-12T19:04:46.314829Z",
     "shell.execute_reply": "2025-02-12T19:04:46.313552Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.193616,
     "end_time": "2025-02-12T19:04:46.317470",
     "exception": false,
     "start_time": "2025-02-12T19:04:46.123854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add predictions to the test DataFrame\n",
    "test['sales_hat'] = test_predictions\n",
    "\n",
    "# Create the submission file\n",
    "test['id'] = test['unique_id'].astype(str) + \"_\" + test['date'].astype(str)\n",
    "submission = test[['id', 'sales_hat']]\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc053488",
   "metadata": {
    "papermill": {
     "duration": 0.008294,
     "end_time": "2025-02-12T19:04:46.333927",
     "exception": false,
     "start_time": "2025-02-12T19:04:46.325633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10173359,
     "sourceId": 88742,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8948.058799,
   "end_time": "2025-02-12T19:04:47.366684",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-12T16:35:39.307885",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

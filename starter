{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":88742,"databundleVersionId":10173359,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"7706bf7e-ab7a-4ce7-b326-f816fa04bf03","_cell_guid":"4f15d919-7652-403c-a073-f39f73457432","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:30:51.666642Z","iopub.execute_input":"2025-02-11T16:30:51.667128Z","iopub.status.idle":"2025-02-11T16:30:52.921742Z","shell.execute_reply.started":"2025-02-11T16:30:51.667079Z","shell.execute_reply":"2025-02-11T16:30:52.920689Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import lightgbm as lgb\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.metrics import mean_absolute_error","metadata":{"_uuid":"206a70f6-3b57-4331-af9b-9febc8c14548","_cell_guid":"9dbb0081-4679-459b-af26-591a4abd531d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:30:52.924786Z","iopub.execute_input":"2025-02-11T16:30:52.925269Z","iopub.status.idle":"2025-02-11T16:30:55.669285Z","shell.execute_reply.started":"2025-02-11T16:30:52.925236Z","shell.execute_reply":"2025-02-11T16:30:55.668105Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Adjust file paths as necessary\ntrain = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\ntest = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\ninventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\ncalendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\nweights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv')","metadata":{"_uuid":"8efd9541-9034-4dda-8ed4-2d82ac392ad5","_cell_guid":"3cd66a87-4217-4bdf-b3b2-ce685b4e80aa","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:30:55.670592Z","iopub.execute_input":"2025-02-11T16:30:55.671198Z","iopub.status.idle":"2025-02-11T16:31:05.280751Z","shell.execute_reply.started":"2025-02-11T16:30:55.671163Z","shell.execute_reply":"2025-02-11T16:31:05.279375Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train = train.merge(calendar, on=['warehouse', 'date'], how='left')\ntrain = train.merge(weights, on='unique_id', how='left')\ntrain = train.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')","metadata":{"_uuid":"c03ce7fa-955b-47a3-adbe-917bfd435201","_cell_guid":"9fe9df98-3215-4daf-8713-7c9b5cde2af4","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:05.282237Z","iopub.execute_input":"2025-02-11T16:31:05.282561Z","iopub.status.idle":"2025-02-11T16:31:09.169008Z","shell.execute_reply.started":"2025-02-11T16:31:05.282529Z","shell.execute_reply":"2025-02-11T16:31:09.167569Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"test = test.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')","metadata":{"_uuid":"3a9818a8-052b-4686-b1d4-25ae4c2aee12","_cell_guid":"27f4d8cd-e1fd-482b-b41f-54b0390a910d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:09.170427Z","iopub.execute_input":"2025-02-11T16:31:09.170848Z","iopub.status.idle":"2025-02-11T16:31:09.189631Z","shell.execute_reply.started":"2025-02-11T16:31:09.170813Z","shell.execute_reply":"2025-02-11T16:31:09.188280Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\ncalendar['date'] = pd.to_datetime(calendar['date'])","metadata":{"_uuid":"78a91a32-cb22-4248-8ba8-a302107f7353","_cell_guid":"95d970c2-816d-4f76-bd29-5b4f6527a087","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:09.192056Z","iopub.execute_input":"2025-02-11T16:31:09.192487Z","iopub.status.idle":"2025-02-11T16:31:09.945107Z","shell.execute_reply.started":"2025-02-11T16:31:09.192451Z","shell.execute_reply":"2025-02-11T16:31:09.943738Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def date_features(df):\n    df[\"day_of_week\"] = df[\"date\"].dt.dayofweek\n    df[\"month\"] = df[\"date\"].dt.month\n    df[\"Day_of_Month\"] = df[\"date\"].dt.day\n    df[\"Week_of_Year\"] = df[\"date\"].dt.isocalendar().week\n    df[\"Date_Weekday\"] = df[\"date\"].dt.weekday\n    df[\"Date_Dayofyear\"] = df[\"date\"].dt.dayofyear\n    return df","metadata":{"_uuid":"518f5130-8872-49ea-85e5-ff6cf755d667","_cell_guid":"deb975bc-eae1-41df-94fc-7d1719f2e081","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:09.949022Z","iopub.execute_input":"2025-02-11T16:31:09.949471Z","iopub.status.idle":"2025-02-11T16:31:09.957230Z","shell.execute_reply.started":"2025-02-11T16:31:09.949433Z","shell.execute_reply":"2025-02-11T16:31:09.955577Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def category(df):\n    df['category'] = df['name'].str.split('_',expand=True)[0]\n    return df","metadata":{"_uuid":"945e7b90-c421-4dc7-a779-14e7448dd8dd","_cell_guid":"f971aaf9-24ae-41d0-8a7a-feaef08cf757","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:09.959014Z","iopub.execute_input":"2025-02-11T16:31:09.959485Z","iopub.status.idle":"2025-02-11T16:31:09.972275Z","shell.execute_reply.started":"2025-02-11T16:31:09.959427Z","shell.execute_reply":"2025-02-11T16:31:09.970881Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Merge weights into training data\ntrain['weight'] = train['weight'].fillna(1)","metadata":{"_uuid":"10f9d5d2-883a-4a61-b9d0-e8dfef9ccf4a","_cell_guid":"ad13b37b-bf95-4629-a966-8f8c073a9d82","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:09.973703Z","iopub.execute_input":"2025-02-11T16:31:09.974369Z","iopub.status.idle":"2025-02-11T16:31:10.005302Z","shell.execute_reply.started":"2025-02-11T16:31:09.974335Z","shell.execute_reply":"2025-02-11T16:31:10.004033Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"PERIODS = [7, 14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]\n\ndef lagged_product_sales(df):\n    if 'sales' in df.columns:  # Check if 'sales' column exists\n        for shift in PERIODS:\n            df[f'product_sales_{shift}'] = df.groupby(['warehouse', 'name'])['sales'].shift(periods=shift)\n    else:\n        # If 'sales' column is missing, fill lagged features with NaN or 0\n        for shift in PERIODS:\n            df[f'product_sales_{shift}'] = np.nan  # or 0\n    return df","metadata":{"_uuid":"9558b350-f4c1-4366-ad94-bc0b2c1ace1f","_cell_guid":"2412718a-5c01-4758-b9a4-bdbc65b7462d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:10.006760Z","iopub.execute_input":"2025-02-11T16:31:10.007108Z","iopub.status.idle":"2025-02-11T16:31:10.014786Z","shell.execute_reply.started":"2025-02-11T16:31:10.007076Z","shell.execute_reply":"2025-02-11T16:31:10.013410Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"train['price_discount_interaction'] = train['sell_price_main'] * train['type_0_discount']\ntest['price_discount_interaction'] = test['sell_price_main'] * test['type_0_discount']\n\n# Add a small constant to avoid log(0)\ntrain['log_total_orders'] = np.log1p(train['total_orders'])\ntest['log_total_orders'] = np.log1p(test['total_orders'])\n\n# Create polynomial features\ntrain['log_total_orders_sq'] = train['log_total_orders'] ** 2\ntrain['log_total_orders_cube'] = train['log_total_orders'] ** 3\ntrain['log_total_orders_fourth'] = train['log_total_orders'] ** 4\n\ntest['log_total_orders_sq'] = test['log_total_orders'] ** 2\ntest['log_total_orders_cube'] = test['log_total_orders'] ** 3\ntest['log_total_orders_fourth'] = test['log_total_orders'] ** 4","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T16:31:10.016558Z","iopub.execute_input":"2025-02-11T16:31:10.017087Z","iopub.status.idle":"2025-02-11T16:31:10.424363Z","shell.execute_reply.started":"2025-02-11T16:31:10.017035Z","shell.execute_reply":"2025-02-11T16:31:10.423161Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"train['log_total_orders_discount'] = train['log_total_orders'] * train['type_0_discount']\ntest['log_total_orders_discount'] = test['log_total_orders'] * test['type_0_discount']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T16:31:10.426279Z","iopub.execute_input":"2025-02-11T16:31:10.426777Z","iopub.status.idle":"2025-02-11T16:31:10.471247Z","shell.execute_reply.started":"2025-02-11T16:31:10.426717Z","shell.execute_reply":"2025-02-11T16:31:10.470071Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Add a small constant to avoid log(0)\ntrain['log_sell_price_main'] = np.log1p(train['sell_price_main'])\ntest['log_sell_price_main'] = np.log1p(test['sell_price_main'])\n\n# Create polynomial features\ntrain['log_sell_price_sq'] = train['sell_price_main'] ** 2\ntrain['log_sell_price_cube'] = train['sell_price_main'] ** 3\n\ntest['log_sell_price_sq'] = test['sell_price_main'] ** 2\ntest['log_sell_price_cube'] = test['sell_price_main'] ** 3","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T16:31:10.472579Z","iopub.execute_input":"2025-02-11T16:31:10.472953Z","iopub.status.idle":"2025-02-11T16:31:10.726296Z","shell.execute_reply.started":"2025-02-11T16:31:10.472919Z","shell.execute_reply":"2025-02-11T16:31:10.725123Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"train['type_0_multiply'] = train['type_0_discount'] * 100\ntest['type_0_multiply'] = test['type_0_discount'] * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T16:31:10.727913Z","iopub.execute_input":"2025-02-11T16:31:10.728275Z","iopub.status.idle":"2025-02-11T16:31:10.767284Z","shell.execute_reply.started":"2025-02-11T16:31:10.728241Z","shell.execute_reply":"2025-02-11T16:31:10.766164Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"train = date_features(train)\ntrain = category(train)\ntrain = lagged_product_sales(train)","metadata":{"_uuid":"1e361342-8082-4dd7-874d-0646154cddcb","_cell_guid":"de6bac99-f42a-45d9-9797-aa85be28cf09","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:15.764695Z","iopub.execute_input":"2025-02-11T16:31:15.765140Z","iopub.status.idle":"2025-02-11T16:31:38.707957Z","shell.execute_reply.started":"2025-02-11T16:31:15.765105Z","shell.execute_reply":"2025-02-11T16:31:38.706670Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Fill missing values in train\ntrain.fillna(method='bfill', inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-11T16:31:38.710164Z","iopub.execute_input":"2025-02-11T16:31:38.710660Z","iopub.status.idle":"2025-02-11T16:31:41.334189Z","shell.execute_reply.started":"2025-02-11T16:31:38.710577Z","shell.execute_reply":"2025-02-11T16:31:41.332894Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_24/2070509932.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  train.fillna(method='bfill', inplace=True)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# Function to reduce memory usage\ndef reduce_memory_usage(df):\n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        # Skip datetime columns\n        if col_type == 'datetime64[ns]':\n            continue\n        \n        # Process numeric columns\n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                else:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                # Handle float columns\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            # For object columns, consider categorical encoding\n            df[col] = df[col].astype('category')\n    \n    return df\n\n# Apply memory reduction to train and test\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","metadata":{"_uuid":"fcba84ec-b048-4257-8b98-3441d22ebb2c","_cell_guid":"53c1eea1-adf4-4f8c-9712-d3b474645e35","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-11T16:31:41.335680Z","iopub.execute_input":"2025-02-11T16:31:41.336077Z","iopub.status.idle":"2025-02-11T16:31:44.385820Z","shell.execute_reply.started":"2025-02-11T16:31:41.336041Z","shell.execute_reply":"2025-02-11T16:31:44.384699Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Prepare data for LightGBM\nfeatures = ['warehouse', 'total_orders',\n       'sell_price_main', 'type_0_discount',\n       'type_2_discount', 'name',\n        'price_discount_interaction',\n       'log_total_orders', 'log_total_orders_sq', 'log_total_orders_cube',\n       'log_total_orders_fourth', 'log_total_orders_discount',\n       'log_sell_price_main', 'log_sell_price_sq', 'log_sell_price_cube',\n       'type_0_multiply', 'day_of_week', 'month', 'Day_of_Month',\n       'Week_of_Year', 'Date_Weekday', 'Date_Dayofyear', 'category',\n       'product_sales_7', 'product_sales_14', 'product_sales_16',\n       'product_sales_18', 'product_sales_21', 'product_sales_30',\n       'product_sales_60', 'product_sales_90', 'product_sales_120',\n       'product_sales_180', 'product_sales_270', 'product_sales_350',\n       'product_sales_600', 'product_sales_1000']\nX = train[features]\ny = train['sales']","metadata":{"_uuid":"71351c00-8faa-421c-ba90-f2ffa28e73f8","_cell_guid":"5c1a1e4b-b37a-4ccf-beac-f2003e7cd874","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Define the number of splits for TimeSeriesSplit\ntscv = TimeSeriesSplit(n_splits=3)\n\n# Initialize lists to store results\nwmae_scores = []\n\n# Perform time series cross-validation\nfor train_index, val_index in tscv.split(X):\n    X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n    y_train, y_val = y.iloc[train_index], y.iloc[val_index]","metadata":{"_uuid":"b557ee69-cc99-48cb-bed9-dfe9a9236ad8","_cell_guid":"b4071951-c44a-4aea-ab14-a5921442c8fa","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"params={ \n    'learning_rate': 0.021796506746095975,\n    'num_leaves': 95,\n    'max_depth': 10,\n    'min_child_samples': 25,\n    'subsample': 0.7057135664023435,\n    'colsample_bytree': 0.8528497905459008,\n    'reg_alpha': 0.01,\n    'reg_lambda': 0.1,\n    'num_boost_round': 5800,\n    'objective': 'regression',\n    'metric': 'mae',\n    'boosting_type': 'gbdt',\n}\n\n# Train LightGBM model\nmodel = lgb.LGBMRegressor(**params)\nmodel.fit(X_train, y_train)","metadata":{"_uuid":"0990842f-6819-4241-8518-c8c30c4311f4","_cell_guid":"3d4b1d44-dac1-4da7-91c7-e16823d18069","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate training error\ny_train_pred = model.predict(X_train)\ntrain_wmae = mean_absolute_error(y_train, y_train_pred, sample_weight=train.loc[X_train.index, 'weight'])\nprint(f'Training WMAE: {train_wmae}')\n\n# Evaluate validation error\ny_val_pred = model.predict(X_val)\nval_wmae = mean_absolute_error(y_val, y_val_pred, sample_weight=train.loc[X_val.index, 'weight'])\nprint(f'Validation WMAE: {val_wmae}')","metadata":{"_uuid":"7b1858ca-daf7-46e7-90c7-e6b8aee67eca","_cell_guid":"6fc9b68e-cae2-4ee7-80c9-8ffa16c80ab7","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test = date_features(test)\ntest = category(test)","metadata":{"_uuid":"ad7dbe66-69b6-49da-a4ff-cd2fe6b58f1f","_cell_guid":"86bbea9c-d45c-4ef4-a041-e6219bdfa098","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Approximate lagged features for test using the last known values from train\nfor shift in PERIODS:\n    last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n    last_lag_values.rename(columns={f'product_sales_{shift}': f'product_sales_{shift}'}, inplace=True)\n    test = test.merge(last_lag_values, on=['warehouse', 'name'], how='left')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test.fillna(method='bfill', inplace=True)","metadata":{"_uuid":"1194d812-9214-47f4-ab47-02a6f326350a","_cell_guid":"c8efc739-bc8c-430e-970f-e61bc8b931bf","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Align categorical features between train and test\ncategorical_features = ['warehouse', 'name', 'category']  # Add other categorical columns here\n\nfor col in categorical_features:\n    # Get unique categories from the training set\n    train_categories = train[col].cat.categories\n    \n    # Reorder and align the test set's categories with the training set\n    test[col] = test[col].astype('category').cat.set_categories(train_categories)\n    \n    # Fill missing categories with \"Unknown\"\n    test[col] = test[col].cat.add_categories(['Unknown']).fillna('Unknown')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Ensure the test set has the same columns as the training set\nX_test = test[features]\n\n# Predict on the test set\ntest_predictions = model.predict(X_test)","metadata":{"_uuid":"1a27e5a1-4c11-4473-92db-ae329f4a2371","_cell_guid":"f8cd7ae4-b459-47bb-8429-74b7f77727a4","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Add predictions to the test DataFrame\ntest['sales_hat'] = test_predictions\n\n# Create the submission file\ntest['id'] = test['unique_id'].astype(str) + \"_\" + test['date'].astype(str)\nsubmission = test[['id', 'sales_hat']]\nsubmission.to_csv('submission.csv', index=False)","metadata":{"_uuid":"496af11a-2df6-4c0b-b4ee-5732a9592901","_cell_guid":"00b8ab33-d2bc-46a3-ad24-1d60cf59d6c2","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
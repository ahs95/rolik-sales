{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":88742,"databundleVersionId":10173359,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"0bd383a6-67d0-4ff1-b62f-d8615d7633c5","_cell_guid":"942731e3-16b9-4b63-849a-0d191f729a66","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T20:14:07.818654Z","iopub.execute_input":"2025-02-09T20:14:07.819111Z","iopub.status.idle":"2025-02-09T20:14:08.232451Z","shell.execute_reply.started":"2025-02-09T20:14:07.819072Z","shell.execute_reply":"2025-02-09T20:14:08.231274Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import lightgbm as lgb\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.metrics import mean_absolute_error","metadata":{"_uuid":"82fd2cae-032a-4ebf-93e8-66ca53b95a08","_cell_guid":"66a0b12a-9db2-4d0e-a822-f4baac45aee3","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T20:14:08.850289Z","iopub.execute_input":"2025-02-09T20:14:08.850824Z","iopub.status.idle":"2025-02-09T20:14:10.828136Z","shell.execute_reply.started":"2025-02-09T20:14:08.850786Z","shell.execute_reply":"2025-02-09T20:14:10.826898Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# Adjust file paths as necessary\ntrain = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\ntest = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\ninventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\ncalendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\nweights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv')","metadata":{"_uuid":"e26c3178-06b1-491e-8b3a-85707c5a915e","_cell_guid":"f7984a33-edea-4467-b4f8-566d163753d2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T20:14:10.830059Z","iopub.execute_input":"2025-02-09T20:14:10.830651Z","iopub.status.idle":"2025-02-09T20:14:18.943410Z","shell.execute_reply.started":"2025-02-09T20:14:10.830612Z","shell.execute_reply":"2025-02-09T20:14:18.942376Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train = train.merge(calendar, on=['warehouse', 'date'], how='left')\ntrain = train.merge(weights, on='unique_id', how='left')\ntrain = train.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')","metadata":{"_uuid":"77560840-d24e-4065-b7cb-d7cfe99eb9b3","_cell_guid":"47944ff6-6b03-4bda-bda3-2e4184002966","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T20:14:18.945670Z","iopub.execute_input":"2025-02-09T20:14:18.946152Z","iopub.status.idle":"2025-02-09T20:14:22.436629Z","shell.execute_reply.started":"2025-02-09T20:14:18.946102Z","shell.execute_reply":"2025-02-09T20:14:22.435430Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"train['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\ncalendar['date'] = pd.to_datetime(calendar['date'])","metadata":{"_uuid":"5355c14e-07f9-4e9b-9ba9-54d8975c78e2","_cell_guid":"74522ec0-99ba-4542-9e96-ec835aa5308d","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-09T20:14:22.438160Z","iopub.execute_input":"2025-02-09T20:14:22.438638Z","iopub.status.idle":"2025-02-09T20:14:23.183487Z","shell.execute_reply.started":"2025-02-09T20:14:22.438591Z","shell.execute_reply":"2025-02-09T20:14:23.182229Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"def date_features(df):\n    df[\"day_of_week\"] = df[\"date\"].dt.dayofweek\n    df[\"month\"] = df[\"date\"].dt.month\n    df[\"Day_of_Month\"] = df[\"date\"].dt.day\n    df[\"Week_of_Year\"] = df[\"date\"].dt.isocalendar().week\n    df[\"Date_Weekday\"] = df[\"date\"].dt.weekday\n    df[\"Date_Dayofyear\"] = df[\"date\"].dt.dayofyear\n    return df","metadata":{"_uuid":"347bddbf-8584-4bb3-8d5d-52804e63155c","_cell_guid":"185f120c-1a23-43bb-9d57-83502745c466","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:25.141891Z","iopub.execute_input":"2025-02-09T17:32:25.142209Z","iopub.status.idle":"2025-02-09T17:32:34.858017Z","shell.execute_reply.started":"2025-02-09T17:32:25.142179Z","shell.execute_reply":"2025-02-09T17:32:34.856712Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def category(df):\n    df['category'] = df['name'].str.split('_',expand=True)[0]\n    return df","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Merge weights into training data\ntrain['weight'] = train['weight'].fillna(1)","metadata":{"_uuid":"567cf0ae-d287-46a7-b035-1803cb7c1271","_cell_guid":"e3077d9e-f2a3-48d9-aa9e-b5ff18606e72","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:34.860746Z","iopub.execute_input":"2025-02-09T17:32:34.861115Z","iopub.status.idle":"2025-02-09T17:32:34.898501Z","shell.execute_reply.started":"2025-02-09T17:32:34.861082Z","shell.execute_reply":"2025-02-09T17:32:34.897499Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"PERIODS = [14,16,18,21,30,60,90,120,180,270,350,600]\n\ndef lagged_product_sales(df):\n    for shift in PERIODS:\n        df[f'product_sales_{shift}']=df.groupby(['warehouse','name'])['sales'].shift(periods=shift)\n    return df","metadata":{"_uuid":"064e5c7c-8aac-4c3b-a54f-48ce774de020","_cell_guid":"8bd190bf-bebb-4c9e-bfdd-ccbdd8921705","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:34.899738Z","iopub.execute_input":"2025-02-09T17:32:34.900061Z","iopub.status.idle":"2025-02-09T17:32:44.082192Z","shell.execute_reply.started":"2025-02-09T17:32:34.900031Z","shell.execute_reply":"2025-02-09T17:32:44.081118Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"train = date_features(train)\ntrain = category(train)\ntrain = lagged_product_sales(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.fillna(method='bfill', inplace=True)","metadata":{"_uuid":"efbe2ac8-0d21-4dca-a71f-5882a28cb263","_cell_guid":"d3a83c4a-be3f-4db1-92b5-9184a0eda538","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:44.083145Z","iopub.execute_input":"2025-02-09T17:32:44.083473Z","iopub.status.idle":"2025-02-09T17:32:46.478422Z","shell.execute_reply.started":"2025-02-09T17:32:44.083442Z","shell.execute_reply":"2025-02-09T17:32:46.477535Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_24/30274837.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  train.fillna(method='bfill', inplace=True)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Function to reduce memory usage\ndef reduce_memory_usage(df):\n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        # Skip datetime columns\n        if col_type == 'datetime64[ns]':\n            continue\n        \n        # Process numeric columns\n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                else:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                # Handle float columns\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            # For object columns, consider categorical encoding\n            df[col] = df[col].astype('category')\n    \n    return df\n\n# Apply memory reduction to train and test\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","metadata":{"_uuid":"ddf8117b-d432-40d8-a157-0c6d914e04e8","_cell_guid":"2179d1de-671d-4878-a83b-ef46216adbe5","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-09T17:32:46.479738Z","iopub.execute_input":"2025-02-09T17:32:46.480171Z","iopub.status.idle":"2025-02-09T17:32:48.924033Z","shell.execute_reply.started":"2025-02-09T17:32:46.480127Z","shell.execute_reply":"2025-02-09T17:32:48.922811Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"train.columns","metadata":{"_uuid":"6d4d5857-b2fd-4f53-839e-97bf5cde530b","_cell_guid":"2d808221-75fa-40b9-aca9-46c1d1004aac","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:48.925322Z","iopub.execute_input":"2025-02-09T17:32:48.925647Z","iopub.status.idle":"2025-02-09T17:32:48.933967Z","shell.execute_reply.started":"2025-02-09T17:32:48.925616Z","shell.execute_reply":"2025-02-09T17:32:48.932862Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Index(['unique_id', 'date', 'warehouse', 'total_orders', 'sales',\n       'sell_price_main', 'availability', 'type_0_discount', 'type_1_discount',\n       'type_2_discount', 'type_3_discount', 'type_4_discount',\n       'type_5_discount', 'type_6_discount', 'holiday_name', 'holiday',\n       'shops_closed', 'winter_school_holidays', 'school_holidays', 'weight',\n       'product_unique_id', 'name', 'day_of_week', 'month', 'Day_of_Month',\n       'Week_of_Year', 'Date_Weekday', 'Date_Dayofyear', 'category',\n       'product_sales_14', 'product_sales_16', 'product_sales_18',\n       'product_sales_21', 'product_sales_30', 'product_sales_60',\n       'product_sales_90', 'product_sales_120', 'product_sales_180',\n       'product_sales_270', 'product_sales_350', 'product_sales_600'],\n      dtype='object')"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"# Prepare data for LightGBM\nfeatures = ['total_orders', \n       'sell_price_main', 'type_0_discount', \n       'type_2_discount',\n       'name', 'day_of_week', 'month', 'Day_of_Month',\n       'Week_of_Year', 'Date_Weekday', 'Date_Dayofyear', 'category',\n       'product_sales_14', 'product_sales_16', 'product_sales_18',\n       'product_sales_21', 'product_sales_30', 'product_sales_60',\n       'product_sales_90', 'product_sales_120', 'product_sales_180',\n       'product_sales_270', 'product_sales_350', 'product_sales_600']\nX = train[features]\ny = train['sales']","metadata":{"_uuid":"4c619a31-c969-4fb0-8780-e9fcaa55d354","_cell_guid":"8fbaad30-220c-47a3-948c-aa9cb96fba41","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:48.935527Z","iopub.execute_input":"2025-02-09T17:32:48.936062Z","iopub.status.idle":"2025-02-09T17:32:49.204366Z","shell.execute_reply.started":"2025-02-09T17:32:48.936012Z","shell.execute_reply":"2025-02-09T17:32:49.203412Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Define the number of splits for TimeSeriesSplit\ntscv = TimeSeriesSplit(n_splits=3)\n\n# Initialize lists to store results\nwmae_scores = []\n\n# Perform time series cross-validation\nfor train_index, val_index in tscv.split(X):\n    X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n    y_train, y_val = y.iloc[train_index], y.iloc[val_index]","metadata":{"_uuid":"09bf8d0c-a52b-429c-aeb9-655722ac8cc1","_cell_guid":"a0e117ce-daa6-4164-9220-ac4bff885076","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T17:32:49.205977Z","iopub.execute_input":"2025-02-09T17:32:49.206427Z","iopub.status.idle":"2025-02-09T17:32:50.609454Z","shell.execute_reply.started":"2025-02-09T17:32:49.206381Z","shell.execute_reply":"2025-02-09T17:32:50.608530Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"## Parameter from here: https://www.kaggle.com/code/meryentr/rohlik-sales-lightgbm-lb-20-75\nparams={ \n    'learning_rate': 0.021796506746095975,\n    'num_leaves': 93,\n    'max_depth': 10,\n    'min_child_samples': 25,\n    'subsample': 0.7057135664023435,\n    'colsample_bytree': 0.8528497905459008,\n    'reg_alpha': 0.036786449788597686,\n    'reg_lambda': 0.3151110021900479,\n    'num_boost_round': 9800,\n    'objective': 'regression',\n    'metric': 'mae',\n    'boosting_type': 'gbdt',\n}\n\n# Train LightGBM model\nmodel = lgb.LGBMRegressor(**params)\nmodel.fit(X_train, y_train)","metadata":{"_uuid":"9faf7826-7dba-436c-82c9-e042ef207854","_cell_guid":"3c077264-8be5-47d4-862e-ef135817b423","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-09T20:11:12.577550Z","iopub.execute_input":"2025-02-09T20:11:12.577929Z","iopub.status.idle":"2025-02-09T20:11:12.607685Z","shell.execute_reply.started":"2025-02-09T20:11:12.577887Z","shell.execute_reply":"2025-02-09T20:11:12.606142Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 18\u001b[0m\n\u001b[1;32m      2\u001b[0m params\u001b[38;5;241m=\u001b[39m{ \n\u001b[1;32m      3\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlearning_rate\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0.021796506746095975\u001b[39m,\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnum_leaves\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m93\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mboosting_type\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mgbdt\u001b[39m\u001b[38;5;124m'\u001b[39m,\n\u001b[1;32m     15\u001b[0m }\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m# Train LightGBM model\u001b[39;00m\n\u001b[0;32m---> 18\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mlgb\u001b[49m\u001b[38;5;241m.\u001b[39mLGBMRegressor(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams)\n\u001b[1;32m     19\u001b[0m model\u001b[38;5;241m.\u001b[39mfit(X_train, y_train)\n","\u001b[0;31mNameError\u001b[0m: name 'lgb' is not defined"],"ename":"NameError","evalue":"name 'lgb' is not defined","output_type":"error"}],"execution_count":2},{"cell_type":"code","source":"# Evaluate training error\ny_train_pred = model.predict(X_train)\ntrain_wmae = mean_absolute_error(y_train, y_train_pred, sample_weight=train.loc[X_train.index, 'weight'])\nprint(f'Training WMAE: {train_wmae}')\n\n# Evaluate validation error\ny_val_pred = model.predict(X_val)\nval_wmae = mean_absolute_error(y_val, y_val_pred, sample_weight=train.loc[X_val.index, 'weight'])\nprint(f'Validation WMAE: {val_wmae}')","metadata":{"_uuid":"633d8b63-9899-4b4d-bf37-1bd2f2a2b09e","_cell_guid":"7d351fe5-b0d4-4ec9-9c68-a16db36351b9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-09T20:11:01.206800Z","iopub.execute_input":"2025-02-09T20:11:01.207380Z","iopub.status.idle":"2025-02-09T20:11:01.523727Z","shell.execute_reply.started":"2025-02-09T20:11:01.207312Z","shell.execute_reply":"2025-02-09T20:11:01.521802Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Evaluate training error\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m y_train_pred \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241m.\u001b[39mpredict(X_train)\n\u001b[1;32m      3\u001b[0m train_wmae \u001b[38;5;241m=\u001b[39m mean_absolute_error(y_train, y_train_pred, sample_weight\u001b[38;5;241m=\u001b[39mtrain\u001b[38;5;241m.\u001b[39mloc[X_train\u001b[38;5;241m.\u001b[39mindex, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mweight\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining WMAE: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtrain_wmae\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"],"ename":"NameError","evalue":"name 'model' is not defined","output_type":"error"}],"execution_count":1},{"cell_type":"code","source":"test = date_features(test)\ntest = category(test)\ntest = lagged_product_sales(test)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test.fillna(method='bfill', inplace=True)\n\n# Ensure the test set has the same columns as the training set\nX_test = test[features]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Predict on the test set\ntest_predictions = model.predict(X_test)\n\n# Add predictions to the test DataFrame\ntest['sales_hat'] = test_predictions","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test['id'] = test['unique_id'].astype(str) + \"_\" + test['date'].astype(str)\n\n# Create the submission DataFrame\nsubmission = test[['id', 'sales_hat']]\n\n# Save the submission file\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":88742,"databundleVersionId":10173359,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"1b17565c-5147-45a1-9732-0b62b5e077f5","_cell_guid":"367ef335-6038-4ca2-ab52-9d397eef76a7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:48.761122Z","iopub.execute_input":"2025-02-06T13:10:48.761564Z","iopub.status.idle":"2025-02-06T13:10:48.770030Z","shell.execute_reply.started":"2025-02-06T13:10:48.761496Z","shell.execute_reply":"2025-02-06T13:10:48.768805Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n","output_type":"stream"}],"execution_count":53},{"cell_type":"code","source":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error","metadata":{"_uuid":"3d5a445b-daec-4e3e-841e-04f6de542e7f","_cell_guid":"77267a8a-6f10-498c-bea2-09a24b797198","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:48.772031Z","iopub.execute_input":"2025-02-06T13:10:48.772395Z","iopub.status.idle":"2025-02-06T13:10:48.783795Z","shell.execute_reply.started":"2025-02-06T13:10:48.772362Z","shell.execute_reply":"2025-02-06T13:10:48.782759Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"# Adjust file paths as necessary\ntrain = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\ntest = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\ninventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\ncalendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\nweights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv') ","metadata":{"_uuid":"33609c3d-998f-4dc9-aa8c-491807f4be6c","_cell_guid":"efb237e8-3036-4912-acfe-d9d422ddffd5","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:48.785039Z","iopub.execute_input":"2025-02-06T13:10:48.785367Z","iopub.status.idle":"2025-02-06T13:10:53.617260Z","shell.execute_reply.started":"2025-02-06T13:10:48.785333Z","shell.execute_reply":"2025-02-06T13:10:53.616078Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"#train = train.iloc[:20000]","metadata":{"_uuid":"1863442a-08fa-47d8-85c9-eecfb9f014c4","_cell_guid":"ade2d03c-4d2a-4b25-bb0c-3f4f59237713","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:53.619575Z","iopub.execute_input":"2025-02-06T13:10:53.619917Z","iopub.status.idle":"2025-02-06T13:10:53.626510Z","shell.execute_reply.started":"2025-02-06T13:10:53.619885Z","shell.execute_reply":"2025-02-06T13:10:53.625602Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":56},{"cell_type":"code","source":"train.columns","metadata":{"_uuid":"6a96aac4-88eb-40f5-8ff0-54d2a51b2eaa","_cell_guid":"d474d2b2-a681-4c53-b5de-f65cee265e65","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:53.627867Z","iopub.execute_input":"2025-02-06T13:10:53.628262Z","iopub.status.idle":"2025-02-06T13:10:53.640238Z","shell.execute_reply.started":"2025-02-06T13:10:53.628226Z","shell.execute_reply":"2025-02-06T13:10:53.639198Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"Index(['unique_id', 'date', 'warehouse', 'total_orders', 'sales',\n       'sell_price_main', 'availability', 'type_0_discount', 'type_1_discount',\n       'type_2_discount', 'type_3_discount', 'type_4_discount',\n       'type_5_discount', 'type_6_discount'],\n      dtype='object')"},"metadata":{}}],"execution_count":57},{"cell_type":"code","source":"# Feature engineering\ntrain['date'] = pd.to_datetime(train['date'])  # Ensure 'date' is datetime\ncalendar['date'] = pd.to_datetime(calendar['date'])  # Ensure 'date' is datetime\n\ntrain['day_of_week'] = train['date'].dt.dayofweek\ntrain['month'] = train['date'].dt.month","metadata":{"_uuid":"5d43cade-bf97-4516-a804-e6b489886278","_cell_guid":"a7d56d6e-e0e3-4a17-9bcc-5a1a1afa37a2","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:53.641382Z","iopub.execute_input":"2025-02-06T13:10:53.641741Z","iopub.status.idle":"2025-02-06T13:10:54.775229Z","shell.execute_reply.started":"2025-02-06T13:10:53.641696Z","shell.execute_reply":"2025-02-06T13:10:54.774145Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"# Merge calendar data\ntrain = train.merge(calendar, on=['warehouse', 'date'], how='left')","metadata":{"_uuid":"6fadce95-133a-431b-b114-e5d032193c0c","_cell_guid":"0ea6c292-ef47-48fb-bfad-fab437495f72","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:54.776644Z","iopub.execute_input":"2025-02-06T13:10:54.777189Z","iopub.status.idle":"2025-02-06T13:10:55.799756Z","shell.execute_reply.started":"2025-02-06T13:10:54.777138Z","shell.execute_reply":"2025-02-06T13:10:55.798546Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"# Merge weights into training data\ntrain = train.merge(weights, on='unique_id', how='left')\ntrain['weight'] = train['weight'].fillna(1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-06T13:10:55.803531Z","iopub.execute_input":"2025-02-06T13:10:55.803928Z","iopub.status.idle":"2025-02-06T13:10:56.689505Z","shell.execute_reply.started":"2025-02-06T13:10:55.803890Z","shell.execute_reply":"2025-02-06T13:10:56.688313Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"# Create lag features\ntrain['lag_1'] = train.groupby('unique_id')['sales'].shift(1)\ntrain['rolling_mean_7'] = train.groupby('unique_id')['sales'].transform(lambda x: x.rolling(7).mean())\n\n# Drop rows with missing values\ntrain.dropna(inplace=True)","metadata":{"_uuid":"1bbe442a-66be-4964-8ca0-e64c84e4cf8e","_cell_guid":"725112d2-b779-42de-bea5-44f0e82b8b56","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:56.691195Z","iopub.execute_input":"2025-02-06T13:10:56.691545Z","iopub.status.idle":"2025-02-06T13:10:59.232181Z","shell.execute_reply.started":"2025-02-06T13:10:56.691486Z","shell.execute_reply":"2025-02-06T13:10:59.231069Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"# Prepare data for LightGBM\nfeatures = ['total_orders', 'sell_price_main', 'availability', 'day_of_week', 'month', 'lag_1', 'rolling_mean_7']\nX = train[features]\ny = train['sales']","metadata":{"_uuid":"fa725d61-b39e-45e8-bdde-f2a12bc6c85d","_cell_guid":"88d8097e-d746-4441-8ae9-a173c1e1612f","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:59.234950Z","iopub.execute_input":"2025-02-06T13:10:59.235310Z","iopub.status.idle":"2025-02-06T13:10:59.243552Z","shell.execute_reply.started":"2025-02-06T13:10:59.235275Z","shell.execute_reply":"2025-02-06T13:10:59.242378Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"# Train-test split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, shuffle=False)","metadata":{"_uuid":"acef78a5-5252-4c7c-8aac-c43ed7a20a00","_cell_guid":"16930a21-7a85-4f31-93bc-5bfb3147c3c7","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:59.245376Z","iopub.execute_input":"2025-02-06T13:10:59.245878Z","iopub.status.idle":"2025-02-06T13:10:59.258774Z","shell.execute_reply.started":"2025-02-06T13:10:59.245824Z","shell.execute_reply":"2025-02-06T13:10:59.257507Z"},"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"# Train LightGBM model\nmodel = lgb.LGBMRegressor()\nmodel.fit(X_train, y_train)","metadata":{"_uuid":"96e15b96-0bb8-4287-8737-a89eee158cb1","_cell_guid":"24ac177d-c365-412b-8c94-e711b45854cd","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:59.260065Z","iopub.execute_input":"2025-02-06T13:10:59.260396Z","iopub.status.idle":"2025-02-06T13:10:59.955965Z","shell.execute_reply.started":"2025-02-06T13:10:59.260357Z","shell.execute_reply":"2025-02-06T13:10:59.954863Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003023 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1134\n[LightGBM] [Info] Number of data points in the train set: 129579, number of used features: 7\n[LightGBM] [Info] Start training from score 98.703263\n","output_type":"stream"},{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"LGBMRegressor()","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":64},{"cell_type":"code","source":"# Evaluate\ny_pred = model.predict(X_val)\nwmae = mean_absolute_error(y_val, y_pred, sample_weight=train.loc[X_val.index, 'weight'])\nprint(f'Validation WMAE: {wmae}')","metadata":{"_uuid":"37fae447-f013-417e-aebc-aa43b82b6a0f","_cell_guid":"00d98af4-41b9-4b37-ac74-4a90fa809ac1","trusted":true,"collapsed":false,"execution":{"iopub.status.busy":"2025-02-06T13:10:59.957178Z","iopub.execute_input":"2025-02-06T13:10:59.957530Z","iopub.status.idle":"2025-02-06T13:11:00.094841Z","shell.execute_reply.started":"2025-02-06T13:10:59.957478Z","shell.execute_reply":"2025-02-06T13:11:00.093587Z"},"jupyter":{"outputs_hidden":false}},"outputs":[{"name":"stdout","text":"Validation WMAE: 26.439881761361313\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"# Feature engineering for test\ntest['date'] = pd.to_datetime(test['date'])\ntest['day_of_week'] = test['date'].dt.dayofweek\ntest['month'] = test['date'].dt.month\n\n# Drop overlapping columns from calendar\ncalendar = calendar.drop(columns=['school_holidays', 'winter_school_holidays', 'shops_closed', 'holiday', 'holiday_name'])\n\n# Merge calendar data into test\ntest = test.merge(calendar, on=['warehouse', 'date'], how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-06T13:18:55.693701Z","iopub.execute_input":"2025-02-06T13:18:55.694136Z","iopub.status.idle":"2025-02-06T13:18:55.735194Z","shell.execute_reply.started":"2025-02-06T13:18:55.694097Z","shell.execute_reply":"2025-02-06T13:18:55.734158Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"# Impute lag and rolling features for test\n# Use the last known sales value from train for each unique_id\nlast_sales = train.groupby('unique_id')['sales'].last().reset_index()\nlast_sales.rename(columns={'sales': 'last_sales'}, inplace=True)\n\ntest = test.merge(last_sales, on='unique_id', how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-06T13:19:06.482611Z","iopub.execute_input":"2025-02-06T13:19:06.483376Z","iopub.status.idle":"2025-02-06T13:19:06.502683Z","shell.execute_reply.started":"2025-02-06T13:19:06.483334Z","shell.execute_reply":"2025-02-06T13:19:06.501823Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"# Approximate lag_1 and rolling_mean_7 for test\ntest['lag_1'] = test['last_sales']  # Approximation for lag_1\ntest['rolling_mean_7'] = test['last_sales']  # Approximation for rolling_mean_7\n\n# Impute missing 'availability' in test\nmedian_availability = train['availability'].median()\ntest['availability'] = median_availability\n\n# Predict on test set\ntest_predictions = model.predict(test[features])\ntest['sales_hat'] = test_predictions","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-06T13:19:17.659894Z","iopub.execute_input":"2025-02-06T13:19:17.660304Z","iopub.status.idle":"2025-02-06T13:19:17.801263Z","shell.execute_reply.started":"2025-02-06T13:19:17.660268Z","shell.execute_reply":"2025-02-06T13:19:17.799947Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"# Create the 'id' column\ntest['id'] = test['unique_id'].astype(str) + '_' + test['date'].dt.strftime('%Y-%m-%d')\n\n# Save submission\nsubmission = test[['id', 'sales_hat']]\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-06T13:22:50.084346Z","iopub.execute_input":"2025-02-06T13:22:50.085233Z","iopub.status.idle":"2025-02-06T13:22:50.263505Z","shell.execute_reply.started":"2025-02-06T13:22:50.085186Z","shell.execute_reply":"2025-02-06T13:22:50.262442Z"}},"outputs":[],"execution_count":74},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
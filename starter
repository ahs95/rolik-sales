{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d932b0a",
   "metadata": {
    "_cell_guid": "e577a770-989f-4761-9d98-62667a359cfc",
    "_uuid": "160028f9-96a9-48fd-bebb-9f241ac514be",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:39.217980Z",
     "iopub.status.busy": "2025-02-14T15:12:39.216824Z",
     "iopub.status.idle": "2025-02-14T15:12:40.133852Z",
     "shell.execute_reply": "2025-02-14T15:12:40.132589Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.929672,
     "end_time": "2025-02-14T15:12:40.136325",
     "exception": false,
     "start_time": "2025-02-14T15:12:39.206653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv\n",
      "/kaggle/input/rohlik-sales-forecasting-challenge-v2/solution.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1247ceab",
   "metadata": {
    "_cell_guid": "7b6901b7-522f-4869-9af6-163b43e1d90f",
    "_uuid": "f5fe20a8-03ac-439d-80a8-69cbda70f76a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:40.154493Z",
     "iopub.status.busy": "2025-02-14T15:12:40.153963Z",
     "iopub.status.idle": "2025-02-14T15:12:42.691797Z",
     "shell.execute_reply": "2025-02-14T15:12:42.690606Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.549937,
     "end_time": "2025-02-14T15:12:42.694398",
     "exception": false,
     "start_time": "2025-02-14T15:12:40.144461",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import lightgbm as lgb\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from sklearn.metrics import mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "679bb852",
   "metadata": {
    "_cell_guid": "f351e0ba-8688-4199-82a8-e120aaefc838",
    "_uuid": "e09ca90f-38fe-4af3-8e42-2bf7fe796c75",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:42.713239Z",
     "iopub.status.busy": "2025-02-14T15:12:42.712658Z",
     "iopub.status.idle": "2025-02-14T15:12:49.982747Z",
     "shell.execute_reply": "2025-02-14T15:12:49.981496Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 7.281649,
     "end_time": "2025-02-14T15:12:49.985194",
     "exception": false,
     "start_time": "2025-02-14T15:12:42.703545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Adjust file paths as necessary\n",
    "train = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_train.csv')\n",
    "test = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/sales_test.csv')\n",
    "inventory = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/inventory.csv')\n",
    "calendar = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/calendar.csv')\n",
    "weights = pd.read_csv('/kaggle/input/rohlik-sales-forecasting-challenge-v2/test_weights.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ba581da",
   "metadata": {
    "_cell_guid": "1a42d7a0-8a2f-4be8-9741-392e0d65931f",
    "_uuid": "3e4a92c7-3864-4123-9699-554bd4d38dec",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:50.002328Z",
     "iopub.status.busy": "2025-02-14T15:12:50.001960Z",
     "iopub.status.idle": "2025-02-14T15:12:53.243628Z",
     "shell.execute_reply": "2025-02-14T15:12:53.242618Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.253045,
     "end_time": "2025-02-14T15:12:53.246188",
     "exception": false,
     "start_time": "2025-02-14T15:12:49.993143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = train.merge(calendar, on=['warehouse', 'date'], how='left')\n",
    "train = train.merge(weights, on='unique_id', how='left')\n",
    "train = train.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "19ed160e",
   "metadata": {
    "_cell_guid": "d6a49f1f-8cac-44f0-b794-3aed7c58c8c8",
    "_uuid": "a37ee9c6-1f37-4f53-917d-dab066321e17",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:53.263851Z",
     "iopub.status.busy": "2025-02-14T15:12:53.263433Z",
     "iopub.status.idle": "2025-02-14T15:12:53.278686Z",
     "shell.execute_reply": "2025-02-14T15:12:53.277674Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.026884,
     "end_time": "2025-02-14T15:12:53.281201",
     "exception": false,
     "start_time": "2025-02-14T15:12:53.254317",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test = test.merge(inventory[['unique_id', 'product_unique_id', 'name']], on='unique_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b61bbda8",
   "metadata": {
    "_cell_guid": "2e195674-2750-4caa-9597-95174b367098",
    "_uuid": "cab6acd0-c348-40ba-9ea6-67e0125b4839",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:53.305629Z",
     "iopub.status.busy": "2025-02-14T15:12:53.305228Z",
     "iopub.status.idle": "2025-02-14T15:12:54.105265Z",
     "shell.execute_reply": "2025-02-14T15:12:54.104088Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.816346,
     "end_time": "2025-02-14T15:12:54.107994",
     "exception": false,
     "start_time": "2025-02-14T15:12:53.291648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['date'] = pd.to_datetime(train['date'])\n",
    "test['date'] = pd.to_datetime(test['date'])\n",
    "calendar['date'] = pd.to_datetime(calendar['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "14e5811a",
   "metadata": {
    "_cell_guid": "361b48e3-e59e-4eaf-b1ef-225c0adc7b03",
    "_uuid": "bd6b2e6e-d1cf-4ef5-b5e9-2261de0fcf89",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.126177Z",
     "iopub.status.busy": "2025-02-14T15:12:54.124987Z",
     "iopub.status.idle": "2025-02-14T15:12:54.132003Z",
     "shell.execute_reply": "2025-02-14T15:12:54.130628Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.018367,
     "end_time": "2025-02-14T15:12:54.134336",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.115969",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def date_features(df):\n",
    "    df[\"day_of_week\"] = df[\"date\"].dt.dayofweek\n",
    "    df[\"month\"] = df[\"date\"].dt.month\n",
    "    df[\"Day_of_Month\"] = df[\"date\"].dt.day\n",
    "    df[\"Week_of_Year\"] = df[\"date\"].dt.isocalendar().week\n",
    "    df[\"Date_Weekday\"] = df[\"date\"].dt.weekday\n",
    "    df[\"Date_Dayofyear\"] = df[\"date\"].dt.dayofyear\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a52aab55",
   "metadata": {
    "_cell_guid": "cbd99e6d-2bd6-4f7b-bcb9-907fe6f746e7",
    "_uuid": "35efa1c0-753b-43ce-8fd1-a8c806d99eb8",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.152320Z",
     "iopub.status.busy": "2025-02-14T15:12:54.151924Z",
     "iopub.status.idle": "2025-02-14T15:12:54.157012Z",
     "shell.execute_reply": "2025-02-14T15:12:54.155986Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.016832,
     "end_time": "2025-02-14T15:12:54.159207",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.142375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def category(df):\n",
    "    df['category'] = df['name'].str.split('_',expand=True)[0]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "24867c99",
   "metadata": {
    "_cell_guid": "b020d1fd-d429-4b1e-8985-ad3b0793dfcc",
    "_uuid": "3f00ecd3-3cd5-42d0-b953-4479d785740a",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.176406Z",
     "iopub.status.busy": "2025-02-14T15:12:54.175986Z",
     "iopub.status.idle": "2025-02-14T15:12:54.191600Z",
     "shell.execute_reply": "2025-02-14T15:12:54.190604Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.027281,
     "end_time": "2025-02-14T15:12:54.194223",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.166942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Merge weights into training data\n",
    "train['weight'] = train['weight'].fillna(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "893f979f",
   "metadata": {
    "_cell_guid": "6df0d32e-ca71-41d4-a74d-2c680788c452",
    "_uuid": "ff14ca18-3541-4e0f-9ff4-3e438c93f21e",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.212217Z",
     "iopub.status.busy": "2025-02-14T15:12:54.211178Z",
     "iopub.status.idle": "2025-02-14T15:12:54.217985Z",
     "shell.execute_reply": "2025-02-14T15:12:54.216917Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.017894,
     "end_time": "2025-02-14T15:12:54.220024",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.202130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "PERIODS = [14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]\n",
    "\n",
    "def lagged_product_sales(df):\n",
    "    if 'sales' in df.columns:  # Check if 'sales' column exists\n",
    "        for shift in PERIODS:\n",
    "            df[f'product_sales_{shift}'] = df.groupby(['warehouse', 'name'])['sales'].shift(periods=shift)\n",
    "    else:\n",
    "        # If 'sales' column is missing, fill lagged features with NaN or 0\n",
    "        for shift in PERIODS:\n",
    "            df[f'product_sales_{shift}'] = np.nan  # or 0\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "241d86ab",
   "metadata": {
    "_cell_guid": "e298f401-284d-4a65-8a42-3dab14e9f99d",
    "_uuid": "beaf687c-e814-4354-8fa7-cccbe3a851cc",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.237123Z",
     "iopub.status.busy": "2025-02-14T15:12:54.236721Z",
     "iopub.status.idle": "2025-02-14T15:12:54.824802Z",
     "shell.execute_reply": "2025-02-14T15:12:54.823760Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.599758,
     "end_time": "2025-02-14T15:12:54.827465",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.227707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['price_discount_interaction'] = train['sell_price_main'] * train['type_0_discount']\n",
    "test['price_discount_interaction'] = test['sell_price_main'] * test['type_0_discount']\n",
    "\n",
    "# Add a small constant to avoid log(0)\n",
    "train['log_total_orders'] = np.log1p(train['total_orders'])\n",
    "test['log_total_orders'] = np.log1p(test['total_orders'])\n",
    "\n",
    "for power in list(range(2,7)):\n",
    "    train[f'log_total_orders_{power}'] = train['log_total_orders'] ** power\n",
    "    test[f'log_total_orders_{power}'] = test['log_total_orders'] ** power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf800e5b",
   "metadata": {
    "_cell_guid": "d89a29ca-f404-4972-9d73-cbd0385fa425",
    "_uuid": "2c78b52f-42c8-4eec-9760-12e29bdf1ffa",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.844785Z",
     "iopub.status.busy": "2025-02-14T15:12:54.844371Z",
     "iopub.status.idle": "2025-02-14T15:12:54.871185Z",
     "shell.execute_reply": "2025-02-14T15:12:54.870034Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.038388,
     "end_time": "2025-02-14T15:12:54.873802",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.835414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['log_total_orders_discount'] = train['log_total_orders'] * train['type_0_discount']\n",
    "test['log_total_orders_discount'] = test['log_total_orders'] * test['type_0_discount']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45a718fc",
   "metadata": {
    "_cell_guid": "6318eb08-897d-4e51-b91c-b70e2e9e4315",
    "_uuid": "682d4cbf-3e19-4380-9b4f-6efbbaa87954",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:54.892064Z",
     "iopub.status.busy": "2025-02-14T15:12:54.891161Z",
     "iopub.status.idle": "2025-02-14T15:12:55.340675Z",
     "shell.execute_reply": "2025-02-14T15:12:55.339746Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.461053,
     "end_time": "2025-02-14T15:12:55.343037",
     "exception": false,
     "start_time": "2025-02-14T15:12:54.881984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add a small constant to avoid log(0)\n",
    "train['log_sell_price_main'] = np.log1p(train['sell_price_main'])\n",
    "test['log_sell_price_main'] = np.log1p(test['sell_price_main'])\n",
    "\n",
    "for power in list(range(2,6)):\n",
    "    train[f'log_sell_price_{power}'] = train['log_sell_price_main'] ** power\n",
    "    test[f'log_sell_price_{power}'] = test['log_sell_price_main'] ** power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "504dfcbf",
   "metadata": {
    "_cell_guid": "24df2479-b9b5-4d87-a417-d8c7c17c35b8",
    "_uuid": "bdd3590b-f0f3-4143-b231-ac6c236f65e5",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:55.363128Z",
     "iopub.status.busy": "2025-02-14T15:12:55.362133Z",
     "iopub.status.idle": "2025-02-14T15:12:55.385237Z",
     "shell.execute_reply": "2025-02-14T15:12:55.384080Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.035562,
     "end_time": "2025-02-14T15:12:55.387746",
     "exception": false,
     "start_time": "2025-02-14T15:12:55.352184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train[f'type_0_discount_multiply'] = train['type_0_discount'] * 100\n",
    "test[f'type_0_discount_multiply'] = test['type_0_discount'] * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b19f2481",
   "metadata": {
    "_cell_guid": "058b7890-0f08-40e6-beb7-edd16eeae15a",
    "_uuid": "b6644cd5-3a51-459e-a027-b89c7b5c239f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:55.404754Z",
     "iopub.status.busy": "2025-02-14T15:12:55.404320Z",
     "iopub.status.idle": "2025-02-14T15:12:55.431286Z",
     "shell.execute_reply": "2025-02-14T15:12:55.429877Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.038389,
     "end_time": "2025-02-14T15:12:55.433873",
     "exception": false,
     "start_time": "2025-02-14T15:12:55.395484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['discount_interaction'] = train['type_0_discount'] * train['type_2_discount']\n",
    "test['discount_interaction'] = test['type_0_discount'] * test['type_2_discount']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e7a4baf2",
   "metadata": {
    "_cell_guid": "f283c004-5959-4f29-a5ba-769d830ac804",
    "_uuid": "1f6ae36c-b65b-4acd-88ef-b1775b9adc28",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:55.451413Z",
     "iopub.status.busy": "2025-02-14T15:12:55.451027Z",
     "iopub.status.idle": "2025-02-14T15:12:55.459633Z",
     "shell.execute_reply": "2025-02-14T15:12:55.458589Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.019869,
     "end_time": "2025-02-14T15:12:55.461876",
     "exception": false,
     "start_time": "2025-02-14T15:12:55.442007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define periods for rolling features\n",
    "def add_rolling_features(df):\n",
    "    if 'sales' in df.columns:  # Check if 'sales' column exists\n",
    "        for window in [14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]:\n",
    "            df[f'rolling_mean_{window}'] = df.groupby(['warehouse', 'name'])['sales'].transform(\n",
    "                lambda x: x.shift(1).rolling(window=window, min_periods=1).mean()\n",
    "            )\n",
    "            df[f'rolling_std_{window}'] = df.groupby(['warehouse', 'name'])['sales'].transform(\n",
    "                lambda x: x.shift(1).rolling(window=window, min_periods=1).std()\n",
    "            )\n",
    "    else:\n",
    "        # If 'sales' column is missing, initialize rolling features with NaN\n",
    "        for window in [14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]:\n",
    "            df[f'rolling_mean_{window}'] = np.nan\n",
    "            df[f'rolling_std_{window}'] = np.nan\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bf33c66c",
   "metadata": {
    "_cell_guid": "8473f4ac-74e1-4be5-8b2a-cb82a7134be3",
    "_uuid": "7ee707bc-a26d-42e4-9197-b74c90459f79",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:12:55.479193Z",
     "iopub.status.busy": "2025-02-14T15:12:55.478803Z",
     "iopub.status.idle": "2025-02-14T15:14:36.705596Z",
     "shell.execute_reply": "2025-02-14T15:14:36.704490Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 101.238477,
     "end_time": "2025-02-14T15:14:36.708234",
     "exception": false,
     "start_time": "2025-02-14T15:12:55.469757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = date_features(train)\n",
    "train = category(train)\n",
    "train = lagged_product_sales(train)\n",
    "train = add_rolling_features(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "25103d70",
   "metadata": {
    "_cell_guid": "f52edbdd-a1ba-47dc-bae3-f8eb30899c33",
    "_uuid": "e0830237-acfc-4cb0-a32d-f5dcf308a231",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:14:36.725610Z",
     "iopub.status.busy": "2025-02-14T15:14:36.725183Z",
     "iopub.status.idle": "2025-02-14T15:14:39.602656Z",
     "shell.execute_reply": "2025-02-14T15:14:39.601426Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 2.889787,
     "end_time": "2025-02-14T15:14:39.605911",
     "exception": false,
     "start_time": "2025-02-14T15:14:36.716124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/2070509932.py:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  train.fillna(method='bfill', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# Fill missing values in train\n",
    "train.fillna(method='bfill', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9282f738",
   "metadata": {
    "_cell_guid": "f9c99d5a-2a52-40bd-9b77-3a6853ca7afd",
    "_uuid": "22b63766-2535-47be-99cd-f9135a9a1ddf",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:14:39.630833Z",
     "iopub.status.busy": "2025-02-14T15:14:39.630273Z",
     "iopub.status.idle": "2025-02-14T15:14:43.097336Z",
     "shell.execute_reply": "2025-02-14T15:14:43.096122Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.480518,
     "end_time": "2025-02-14T15:14:43.100065",
     "exception": false,
     "start_time": "2025-02-14T15:14:39.619547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Function to reduce memory usage\n",
    "def reduce_memory_usage(df):\n",
    "    for col in df.columns:\n",
    "        col_type = df[col].dtype\n",
    "        \n",
    "        # Skip datetime columns\n",
    "        if col_type == 'datetime64[ns]':\n",
    "            continue\n",
    "        \n",
    "        # Process numeric columns\n",
    "        if col_type != 'object':\n",
    "            c_min = df[col].min()\n",
    "            c_max = df[col].max()\n",
    "            \n",
    "            if str(col_type)[:3] == 'int':\n",
    "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
    "                    df[col] = df[col].astype(np.int8)\n",
    "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
    "                    df[col] = df[col].astype(np.int16)\n",
    "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
    "                    df[col] = df[col].astype(np.int32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.int64)\n",
    "            else:\n",
    "                # Handle float columns\n",
    "                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
    "                    df[col] = df[col].astype(np.float32)\n",
    "                else:\n",
    "                    df[col] = df[col].astype(np.float64)\n",
    "        else:\n",
    "            # For object columns, consider categorical encoding\n",
    "            df[col] = df[col].astype('category')\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Apply memory reduction to train and test\n",
    "train = reduce_memory_usage(train)\n",
    "test = reduce_memory_usage(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b6033346",
   "metadata": {
    "_cell_guid": "e13058e9-d860-4b11-af99-80b2c55baf97",
    "_uuid": "1fb3ac36-d01c-4e85-b288-77593d3cb567",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:14:43.117962Z",
     "iopub.status.busy": "2025-02-14T15:14:43.117528Z",
     "iopub.status.idle": "2025-02-14T15:14:43.856917Z",
     "shell.execute_reply": "2025-02-14T15:14:43.855880Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.751615,
     "end_time": "2025-02-14T15:14:43.859569",
     "exception": false,
     "start_time": "2025-02-14T15:14:43.107954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prepare data for LightGBM\n",
    "features = ['unique_id','warehouse', 'total_orders',\n",
    "       'sell_price_main','type_0_discount',\n",
    "       'type_2_discount', 'name', 'price_discount_interaction',\n",
    "       'log_total_orders', 'log_total_orders_2', 'log_total_orders_3',\n",
    "       'log_total_orders_4', 'log_total_orders_5', 'log_total_orders_6',\n",
    "       'log_total_orders_discount', 'log_sell_price_main', 'log_sell_price_2',\n",
    "       'log_sell_price_3', 'log_sell_price_4', 'log_sell_price_5',\n",
    "       'type_0_discount_multiply', 'discount_interaction', 'day_of_week',\n",
    "       'month', 'Day_of_Month', 'Week_of_Year', 'Date_Weekday',\n",
    "       'Date_Dayofyear', 'category', 'product_sales_14', 'product_sales_16',\n",
    "       'product_sales_18', 'product_sales_21', 'product_sales_30',\n",
    "       'product_sales_60', 'product_sales_90', 'product_sales_120',\n",
    "       'product_sales_180', 'product_sales_270', 'product_sales_350',\n",
    "       'product_sales_600', 'product_sales_1000', 'rolling_mean_14',\n",
    "       'rolling_std_14', 'rolling_mean_16', 'rolling_std_16',\n",
    "       'rolling_mean_18', 'rolling_std_18', 'rolling_mean_21',\n",
    "       'rolling_std_21', 'rolling_mean_30', 'rolling_std_30',\n",
    "       'rolling_mean_60', 'rolling_std_60', 'rolling_mean_90',\n",
    "       'rolling_std_90', 'rolling_mean_120', 'rolling_std_120',\n",
    "       'rolling_mean_180', 'rolling_std_180', 'rolling_mean_270',\n",
    "       'rolling_std_270', 'rolling_mean_350', 'rolling_std_350',\n",
    "       'rolling_mean_600', 'rolling_std_600', 'rolling_mean_1000',\n",
    "       'rolling_std_1000']\n",
    "X = train[features]\n",
    "y = train['sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a69cb621",
   "metadata": {
    "_cell_guid": "1781b6e6-cbba-4719-ad96-0cb145912754",
    "_uuid": "3580bc81-c41f-42ac-879e-360c2dddc5fe",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:14:43.877140Z",
     "iopub.status.busy": "2025-02-14T15:14:43.876753Z",
     "iopub.status.idle": "2025-02-14T15:14:48.164887Z",
     "shell.execute_reply": "2025-02-14T15:14:48.163843Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 4.299913,
     "end_time": "2025-02-14T15:14:48.167427",
     "exception": false,
     "start_time": "2025-02-14T15:14:43.867514",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the number of splits for TimeSeriesSplit\n",
    "tscv = TimeSeriesSplit(n_splits=3)\n",
    "\n",
    "# Initialize lists to store results\n",
    "wmae_scores = []\n",
    "\n",
    "# Perform time series cross-validation\n",
    "for train_index, val_index in tscv.split(X):\n",
    "    X_train, X_val = X.iloc[train_index], X.iloc[val_index]\n",
    "    y_train, y_val = y.iloc[train_index], y.iloc[val_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7d1d08c2",
   "metadata": {
    "_cell_guid": "230fbff2-b1ad-4fc9-9619-d0094c4d2011",
    "_uuid": "aca4e77e-444e-41df-9454-d2beb6f5a084",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:14:48.185645Z",
     "iopub.status.busy": "2025-02-14T15:14:48.185207Z",
     "iopub.status.idle": "2025-02-14T15:30:49.068706Z",
     "shell.execute_reply": "2025-02-14T15:30:49.067533Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 960.894985,
     "end_time": "2025-02-14T15:30:49.071097",
     "exception": false,
     "start_time": "2025-02-14T15:14:48.176112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/lightgbm/engine.py:172: UserWarning: Found `num_boost_round` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] num_iterations is set=3000, num_boost_round=3000 will be ignored. Current value: num_iterations=3000\n",
      "[LightGBM] [Warning] Categorical features with more bins than the configured maximum bin number found.\n",
      "[LightGBM] [Warning] For categorical features, max_bin and max_bin_by_feature may be ignored with a large number of categories.\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.445303 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 16762\n",
      "[LightGBM] [Info] Number of data points in the train set: 3005565, number of used features: 68\n",
      "[LightGBM] [Info] Start training from score 112.953860\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
      "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor(colsample_bytree=0.8528497905459008, learning_rate=0.04,\n",
       "              max_depth=10, metric=&#x27;mae&#x27;, min_child_samples=25,\n",
       "              num_boost_round=3000, num_leaves=70, objective=&#x27;regression&#x27;,\n",
       "              reg_alpha=0.01, reg_lambda=0.1, subsample=0.7057135664023435)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor(colsample_bytree=0.8528497905459008, learning_rate=0.04,\n",
       "              max_depth=10, metric=&#x27;mae&#x27;, min_child_samples=25,\n",
       "              num_boost_round=3000, num_leaves=70, objective=&#x27;regression&#x27;,\n",
       "              reg_alpha=0.01, reg_lambda=0.1, subsample=0.7057135664023435)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LGBMRegressor(colsample_bytree=0.8528497905459008, learning_rate=0.04,\n",
       "              max_depth=10, metric='mae', min_child_samples=25,\n",
       "              num_boost_round=3000, num_leaves=70, objective='regression',\n",
       "              reg_alpha=0.01, reg_lambda=0.1, subsample=0.7057135664023435)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params={ \n",
    "    'learning_rate': 0.04,\n",
    "    'num_leaves': 70,\n",
    "    'max_depth': 10,\n",
    "    'min_child_samples': 25,\n",
    "    'subsample': 0.7057135664023435,\n",
    "    'colsample_bytree': 0.8528497905459008,\n",
    "    'reg_alpha': 0.01,\n",
    "    'reg_lambda': 0.1,\n",
    "    'num_boost_round': 3000,\n",
    "    'objective': 'regression',\n",
    "    'metric': 'mae',\n",
    "    'boosting_type': 'gbdt',\n",
    "}\n",
    "\n",
    "# Train LightGBM model\n",
    "model = lgb.LGBMRegressor(**params)\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b94723ba",
   "metadata": {
    "_cell_guid": "f5b0ea89-9822-4147-b93d-b81c04ab5db2",
    "_uuid": "f1db96f0-8f97-4622-afb1-6c4b5eb8d5e6",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:30:49.090689Z",
     "iopub.status.busy": "2025-02-14T15:30:49.090255Z",
     "iopub.status.idle": "2025-02-14T15:57:34.897089Z",
     "shell.execute_reply": "2025-02-14T15:57:34.895791Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1605.828253,
     "end_time": "2025-02-14T15:57:34.908247",
     "exception": false,
     "start_time": "2025-02-14T15:30:49.079994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training WMAE: 16.290655937386482\n",
      "Validation WMAE: 24.806660446840407\n"
     ]
    }
   ],
   "source": [
    "# Evaluate training error\n",
    "y_train_pred = model.predict(X_train)\n",
    "train_wmae = mean_absolute_error(y_train, y_train_pred, sample_weight=train.loc[X_train.index, 'weight'])\n",
    "print(f'Training WMAE: {train_wmae}')\n",
    "\n",
    "# Evaluate validation error\n",
    "y_val_pred = model.predict(X_val)\n",
    "val_wmae = mean_absolute_error(y_val, y_val_pred, sample_weight=train.loc[X_val.index, 'weight'])\n",
    "print(f'Validation WMAE: {val_wmae}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "65799521",
   "metadata": {
    "_cell_guid": "eeec1f20-b060-4523-bad1-525118f7058c",
    "_uuid": "aac8ba8b-e803-4f77-bf01-feee6b55c174",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:34.928019Z",
     "iopub.status.busy": "2025-02-14T15:57:34.927611Z",
     "iopub.status.idle": "2025-02-14T15:57:34.972933Z",
     "shell.execute_reply": "2025-02-14T15:57:34.971774Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.058249,
     "end_time": "2025-02-14T15:57:34.975481",
     "exception": false,
     "start_time": "2025-02-14T15:57:34.917232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test = date_features(test)\n",
    "test = category(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1d827116",
   "metadata": {
    "_cell_guid": "844723fd-9350-47b3-8687-9dabd14923eb",
    "_uuid": "359fa123-2b88-44cf-ab95-e55deec0a5a7",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:34.995723Z",
     "iopub.status.busy": "2025-02-14T15:57:34.995297Z",
     "iopub.status.idle": "2025-02-14T15:57:38.409609Z",
     "shell.execute_reply": "2025-02-14T15:57:38.408285Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.427194,
     "end_time": "2025-02-14T15:57:38.412184",
     "exception": false,
     "start_time": "2025-02-14T15:57:34.984990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
      "/tmp/ipykernel_17/542831258.py:4: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n"
     ]
    }
   ],
   "source": [
    "# Approximate rolling features for test using the last known values from train\n",
    "for window in [14, 16, 18, 21, 30, 60, 90, 120, 180, 270, 350, 600, 1000]:\n",
    "    last_rolling_mean = train.groupby(['warehouse', 'name'])[f'rolling_mean_{window}'].last().reset_index()\n",
    "    last_rolling_std = train.groupby(['warehouse', 'name'])[f'rolling_std_{window}'].last().reset_index()\n",
    "    \n",
    "    test = test.merge(last_rolling_mean, on=['warehouse', 'name'], how='left', suffixes=('', '_mean'))\n",
    "    test = test.merge(last_rolling_std, on=['warehouse', 'name'], how='left', suffixes=('', '_std'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "44b09343",
   "metadata": {
    "_cell_guid": "832d48bb-249f-4341-8d0e-b09b6c994d81",
    "_uuid": "d4b74623-946a-4c3f-be43-07b6f2ce69c1",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:38.433923Z",
     "iopub.status.busy": "2025-02-14T15:57:38.433464Z",
     "iopub.status.idle": "2025-02-14T15:57:40.172229Z",
     "shell.execute_reply": "2025-02-14T15:57:40.171003Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1.752517,
     "end_time": "2025-02-14T15:57:40.174785",
     "exception": false,
     "start_time": "2025-02-14T15:57:38.422268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
      "/tmp/ipykernel_17/3620135804.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n"
     ]
    }
   ],
   "source": [
    "# Approximate lagged features for test using the last known values from train\n",
    "for shift in PERIODS:\n",
    "    last_lag_values = train.groupby(['warehouse', 'name'])[f'product_sales_{shift}'].last().reset_index()\n",
    "    last_lag_values.rename(columns={f'product_sales_{shift}': f'product_sales_{shift}'}, inplace=True)\n",
    "    test = test.merge(last_lag_values, on=['warehouse', 'name'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6c5239ba",
   "metadata": {
    "_cell_guid": "6f5110b5-9896-4a8f-b03c-d80b00266b39",
    "_uuid": "e05bd765-4ad7-47f2-86ae-802b1055a650",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:40.199271Z",
     "iopub.status.busy": "2025-02-14T15:57:40.198884Z",
     "iopub.status.idle": "2025-02-14T15:57:40.226596Z",
     "shell.execute_reply": "2025-02-14T15:57:40.225435Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.043591,
     "end_time": "2025-02-14T15:57:40.229292",
     "exception": false,
     "start_time": "2025-02-14T15:57:40.185701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/783850029.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  test.fillna(method='bfill', inplace=True)\n"
     ]
    }
   ],
   "source": [
    "test.fillna(method='bfill', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "764ed04b",
   "metadata": {
    "_cell_guid": "84150f9a-1232-4147-ae34-2a6e8d43e388",
    "_uuid": "8000d6c6-ea8f-4c64-8524-e5aaf6bfa4a4",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:40.253597Z",
     "iopub.status.busy": "2025-02-14T15:57:40.252405Z",
     "iopub.status.idle": "2025-02-14T15:57:40.276185Z",
     "shell.execute_reply": "2025-02-14T15:57:40.274891Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.038886,
     "end_time": "2025-02-14T15:57:40.278839",
     "exception": false,
     "start_time": "2025-02-14T15:57:40.239953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Align categorical features between train and test\n",
    "categorical_features = ['warehouse', 'name', 'category']  # Add other categorical columns here\n",
    "\n",
    "for col in categorical_features:\n",
    "    # Get unique categories from the training set\n",
    "    train_categories = train[col].cat.categories\n",
    "    \n",
    "    # Reorder and align the test set's categories with the training set\n",
    "    test[col] = test[col].astype('category').cat.set_categories(train_categories)\n",
    "    \n",
    "    # Fill missing categories with \"Unknown\"\n",
    "    test[col] = test[col].cat.add_categories(['Unknown']).fillna('Unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b1f75128",
   "metadata": {
    "_cell_guid": "a48feaf6-a9be-47cc-a843-560c428afd70",
    "_uuid": "ef25bdfe-de43-49d0-a2c2-b496ca9547f6",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:40.302776Z",
     "iopub.status.busy": "2025-02-14T15:57:40.302240Z",
     "iopub.status.idle": "2025-02-14T15:57:59.563849Z",
     "shell.execute_reply": "2025-02-14T15:57:59.562716Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 19.276853,
     "end_time": "2025-02-14T15:57:59.566255",
     "exception": false,
     "start_time": "2025-02-14T15:57:40.289402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Ensure the test set has the same columns as the training set\n",
    "X_test = test[features]\n",
    "\n",
    "# Predict on the test set\n",
    "test_predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fc899169",
   "metadata": {
    "_cell_guid": "20507b4f-40fd-4719-84a8-a41edbe2a137",
    "_uuid": "3f409af1-1b33-41e4-a0d9-69a689ecbe7f",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2025-02-14T15:57:59.589446Z",
     "iopub.status.busy": "2025-02-14T15:57:59.589038Z",
     "iopub.status.idle": "2025-02-14T15:57:59.753367Z",
     "shell.execute_reply": "2025-02-14T15:57:59.752291Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.178886,
     "end_time": "2025-02-14T15:57:59.755930",
     "exception": false,
     "start_time": "2025-02-14T15:57:59.577044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Add predictions to the test DataFrame\n",
    "test['sales_hat'] = test_predictions\n",
    "\n",
    "# Create the submission file\n",
    "test['id'] = test['unique_id'].astype(str) + \"_\" + test['date'].astype(str)\n",
    "submission = test[['id', 'sales_hat']]\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09d781b0",
   "metadata": {
    "_cell_guid": "80c275be-ac68-413a-a04f-65ac8f444730",
    "_uuid": "8e2c16e8-7ac4-49a4-8bf0-8b03e7ad3161",
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 0.010081,
     "end_time": "2025-02-14T15:57:59.776467",
     "exception": false,
     "start_time": "2025-02-14T15:57:59.766386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10173359,
     "sourceId": 88742,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30804,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2724.608878,
   "end_time": "2025-02-14T15:58:00.608818",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-14T15:12:35.999940",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
